{"1": "class_var.label = label;\nclass_var.parent = parent;\nclass_var.left = left;\nclass_var.right = right;\nclass_var.color = color;", "2": "var parent = class_var.parent;\n    var right = class_var.right;\n    if (right === null) {\n        return class_var;\n    }\n    class_var.right = right.left;\n    if (class_var.right) {\n        class_var.right.parent = class_var;\n    }\n    class_var.parent = right;\n    right.left = class_var;\n    if (parent !== null) {\n        if ((parent.left && parent.left.__eq__ && parent.left.__eq__(class_var)) || (!parent.left.__eq__ && parent.left === class_var)) {\n            parent.left = right;\n        } else {\n            parent.right = right;\n        }\n    }\n    right.parent = parent;\n    return right;\n", "3": "        if (class_var.left === null) {\n            return class_var;\n        }\n        var parent = class_var.parent;\n        var left = class_var.left;\n        class_var.left = left.right;\n        if (class_var.left) {\n            class_var.left.parent = class_var;\n        }\n        class_var.parent = left;\n        left.right = class_var;\n        if (parent !== null) {\n            if (parent.right === class_var) {\n                parent.right = left;\n            } else {\n                parent.left = left;\n            }\n        }\n        left.parent = parent;\n        return left;", "4": "if (class_var.label === null) {\n    // Only possible with an empty tree\n    class_var.label = label;\n    return class_var;\n}\nif (class_var.label === label) {\n    return class_var;\n} else if (class_var.label > label) {\n    if (class_var.left) {\n        class_var.left.insert(label);\n    } else {\n        class_var.left = new RedBlackTree(label, 1, class_var, null, null);\n        class_var.left._insert_repair();\n    }\n} else {\n    if (class_var.right) {\n        class_var.right.insert(label);\n    } else {\n        class_var.right = new RedBlackTree(label, 1, class_var, null, null);\n        class_var.right._insert_repair();\n    }\n}\nreturn class_var.parent || class_var;", "5": "        if (class_var.parent === null) {\n        // This node is the root, so it just needs to be black\n            class_var.color = 0;\n        } else if (get_color(class_var.parent) === 0) {\n        // If the parent is black, then it just needs to be red\n            class_var.color = 1;\n        } else {\n            var uncle = class_var.parent.sibling();\n            if (get_color(uncle) === 0) {\n                if (class_var.is_left() && class_var.parent.is_right()) {\n                    class_var.parent.rotate_right();\n                    if (class_var.right) {\n                        class_var.right._insert_repair();\n                    }\n                } else if (class_var.is_right() && class_var.parent.is_left()) {\n                    class_var.parent.rotate_left();\n                    if (class_var.left) {\n                        class_var.left._insert_repair();\n                    }\n                } else if (class_var.is_left()) {\n                    if (class_var.grandparent()) {\n                        class_var.grandparent().rotate_right();\n                        class_var.parent.color = 0;\n                    }\n                    if (class_var.parent.right) {\n                        class_var.parent.right.color = 1;\n                    }\n                } else {\n                    if (class_var.grandparent()) {\n                        class_var.grandparent().rotate_left();\n                        class_var.parent.color = 0;\n                    }\n                    if (class_var.parent.left) {\n                        class_var.parent.left.color = 1;\n                    }\n                }\n            } else {\n                class_var.parent.color = 0;\n                if (uncle && class_var.grandparent()) {\n                    uncle.color = 0;\n                    class_var.grandparent().color = 1;\n                    class_var.grandparent()._insert_repair();\n                }\n            }\n        }", "6": "        if (class_var.label === label) {\n            if (class_var.left && class_var.right) {\n                var value = class_var.left.get_max();\n                if (value !== null) {\n                    class_var.label = value;\n                    class_var.left.remove(value);\n                }\n            } else {\n                var child = class_var.left || class_var.right;\n                if (class_var.color === 1) {\n                    if (class_var.parent) {\n                        if (class_var.is_left()) {\n                            class_var.parent.left = null;\n                        } else {\n                            class_var.parent.right = null;\n                        }\n                    }\n                } else {\n                    if (child === null) {\n                        if (class_var.parent === null) {\n                            return new RedBlackTree(null);\n                        } else {\n                            class_var._remove_repair();\n                            if (class_var.is_left()) {\n                                class_var.parent.left = null;\n                            } else {\n                                class_var.parent.right = null;\n                            }\n                            class_var.parent = null;\n                        }\n                    } else {\n                        class_var.label = child.label;\n                        class_var.left = child.left;\n                        class_var.right = child.right;\n                        if (class_var.left) {\n                            class_var.left.parent = class_var;\n                        }\n                        if (class_var.right) {\n                            class_var.right.parent = class_var;\n                        }\n                    }\n                }\n            }\n        } else if (class_var.label !== null && class_var.label > label) {\n            if (class_var.left) {\n                class_var.left.remove(label);\n            }\n        } else {\n            if (class_var.right) {\n                class_var.right.remove(label);\n            }\n        }\n        return class_var.parent || class_var;", "7": "        if (\n        class_var.parent === null\n        || class_var.sibling() === null\n        || class_var.parent.sibling() === null\n        || class_var.grandparent() === null\n        ) {\n            return;\n        }\n        if (get_color(class_var.sibling()) === 1) {\n            class_var.sibling().color = 0;\n            class_var.parent.color = 1;\n            if (class_var.is_left()) {\n                class_var.parent.rotate_left();\n            } else {\n                class_var.parent.rotate_right();\n            }\n        }\n        if (\n        get_color(class_var.parent) === 0\n        && get_color(class_var.sibling()) === 0\n        && get_color(class_var.sibling().left) === 0\n        && get_color(class_var.sibling().right) === 0\n        ) {\n            class_var.sibling().color = 1;\n            class_var.parent._remove_repair();\n            return;\n        }\n        if (\n        get_color(class_var.parent) === 1\n        && get_color(class_var.sibling()) === 0\n        && get_color(class_var.sibling().left) === 0\n        && get_color(class_var.sibling().right) === 0\n        ) {\n            class_var.sibling().color = 1;\n            class_var.parent.color = 0;\n            return;\n        }\n        if (\n        class_var.is_left()\n        && get_color(class_var.sibling()) === 0\n        && get_color(class_var.sibling().right) === 0\n        && get_color(class_var.sibling().left) === 1\n        ) {\n            class_var.sibling().rotate_right();\n            class_var.sibling().color = 0;\n            if (class_var.sibling().right) {\n                class_var.sibling().right.color = 1;\n            }\n        }\n        if (\n        class_var.is_right()\n        && get_color(class_var.sibling()) === 0\n        && get_color(class_var.sibling().right) === 1\n        && get_color(class_var.sibling().left) === 0\n        ) {\n            class_var.sibling().rotate_left();\n            class_var.sibling().color = 0;\n            if (class_var.sibling().left) {\n                class_var.sibling().left.color = 1;\n            }\n        }\n        if (\n        class_var.is_left()\n        && get_color(class_var.sibling()) === 0\n        && get_color(class_var.sibling().right) === 1\n        ) {\n            class_var.parent.rotate_left();\n            class_var.grandparent().color = class_var.parent.color;\n            class_var.parent.color = 0;\n            class_var.parent.sibling().color = 0;\n        }\n        if (\n        class_var.is_right()\n        && get_color(class_var.sibling()) === 0\n        && get_color(class_var.sibling().left) === 1\n        ) {\n            class_var.parent.rotate_right();\n            class_var.grandparent().color = class_var.parent.color;\n            class_var.parent.color = 0;\n            class_var.parent.sibling().color = 0;\n        }", "8": "        if (class_var.color) {\n        // The root was red\n            console.log(\"Property 2\");\n            return false;\n        }\n        // Property 3 does not need to be checked, because None is assumed\n        // to be black and is all the leaves.\n        // Property 4\n        if (!class_var.check_coloring()) {\n            console.log(\"Property 4\");\n            return false;\n        }\n        // Property 5\n        if (class_var.black_height() === null) {\n            console.log(\"Property 5\");\n            return false;\n        }\n        // All properties were met\n        return true;", "9": "        if (class_var.color === 1 && [get_color(class_var.left), get_color(class_var.right)].includes(1)) {\n            return false;\n        }\n        if (class_var.left && !class_var.left.check_coloring()) {\n            return false;\n        }\n        if (class_var.right && !class_var.right.check_coloring()) {\n            return false;\n        }\n        return true;", "10": "if (class_var === null || class_var.left === null || class_var.right === null) {\n    // If we're already at a leaf, there is no path\n    return 1;\n}\nvar left = class_var.left.black_height();\nvar right = class_var.right.black_height();\nif (left === null || right === null) {\n    // There are issues with coloring below children nodes\n    return null;\n}\nif (left !== right) {\n    // The two children have unequal depths\n    return null;\n}\n// Return the black depth of children, plus one if this node is\n// black\nreturn left + (1 - class_var.color);\n", "11": "return class_var.search(label) !== null;", "12": "if (class_var.label === label) {\n    return class_var;\n} else if (class_var.label !== null && label > class_var.label) {\n    if (class_var.right === null) {\n        return null;\n    } else {\n        return class_var.right.search(label);\n    }\n} else {\n    if (class_var.left === null) {\n        return null;\n    } else {\n        return class_var.left.search(label);\n    }\n}", "13": "        if (class_var.label === label) {\n            return class_var.label;\n        } else if (class_var.label !== null && class_var.label > label) {\n            if (class_var.left) {\n                return class_var.left.floor(label);\n            } else {\n                return null;\n            }\n        } else {\n            if (class_var.right) {\n                var attempt = class_var.right.floor(label);\n                if (attempt !== null) {\n                    return attempt;\n                }\n            }\n            return class_var.label;\n        }", "14": "        if (class_var.label === label) {\n            return class_var.label;\n        } else if (class_var.label !== null && class_var.label < label) {\n            if (class_var.right) {\n                return class_var.right.ceil(label);\n            } else {\n                return null;\n            }\n        } else {\n            if (class_var.left) {\n                var attempt = class_var.left.ceil(label);\n                if (attempt !== null) {\n                    return attempt;\n                }\n            }\n            return class_var.label;\n        }", "15": "if (class_var.right) {\n    // Go as far right as possible\n    return class_var.right.get_max();\n} else {\n    return class_var.label;\n}", "16": "if (class_var.left) {\n    // Go as far left as possible\n    return class_var.left.get_min();\n} else {\n    return class_var.label;\n}", "17": "if (class_var.parent === null) {\n    return null;\n} else {\n    return class_var.parent.parent;\n}", "18": "if (class_var.parent === null) {\n    return null;\n} else if (class_var.parent.left === class_var) {\n    return class_var.parent.right;\n} else {\n    return class_var.parent.left;\n}", "19": "if (class_var.parent === null) {\n    return false;\n}\nreturn class_var.parent.left === class_var.parent.left && class_var.parent.left === class_var;\n", "20": "if (class_var.parent === null) {\n    return false;\n}\nreturn class_var.parent.right === class_var;\n", "21": "return true;", "22": "var ln = 1;\n        if (class_var.left) {\n            ln += class_var.left.length;\n        }\n        if (class_var.right) {\n            ln += class_var.right.length;\n        }\n        return ln;\n", "23": "    yield class_var.label;\n    if (class_var.left) {\n        yield* class_var.left.preorder_traverse();\n    }\n    if (class_var.right) {\n        yield* class_var.right.preorder_traverse();\n    }", "24": "if (class_var.left) {\n    yield* class_var.left.inorder_traverse();\n}\nyield class_var.label;\nif (class_var.right) {\n    yield* class_var.right.inorder_traverse();\n}", "25": "if (class_var.left) {\n    yield* class_var.left.postorder_traverse();\n}\nif (class_var.right) {\n    yield* class_var.right.postorder_traverse();\n}\nyield class_var.label;", "26": "        if (!user_check_type(other, RedBlackTree)) {\n            return NotImplemented;\n        }\n        if (class_var.label === other.label) {\n            return ((class_var.left && class_var.left.__eq__ && class_var.left.__eq__(other.left)) || (!class_var.left || !class_var.left.__eq__ && class_var.left === other.left)) && ((class_var.right && class_var.right.__eq__ && class_var.right.__eq__(other.right)) || (!class_var.right || !class_var.right.__eq__ && class_var.right === other.right));\n        } else {\n            return false;\n        }", "27": "if (node === null) {\n    return 0;\n} else {\n    return node.color;\n}", "28": "// Make a tree to test on\nvar tree = RedBlackTree(0, 0, null, null, null);\ntree.left = RedBlackTree(-10, 0, tree, null, null);\ntree.right = RedBlackTree(10, 0, tree, null, null);\ntree.left.left = RedBlackTree(-20, 0, tree.left, null, null);\ntree.left.right = RedBlackTree(-5, 0, tree.left, null, null);\ntree.right.left = RedBlackTree(5, 0, tree.right, null, null);\ntree.right.right = RedBlackTree(20, 0, tree.right, null, null);\n// Make the right rotation\nvar left_rot = RedBlackTree(10, 0, null, null, null);\nleft_rot.left = RedBlackTree(0, 0, left_rot, null, null);\nleft_rot.left.left = RedBlackTree(-10, 0, left_rot.left, null, null);\nleft_rot.left.right = RedBlackTree(5, 0, left_rot.left, null, null);\nleft_rot.left.left.left = RedBlackTree(-20, 0, left_rot.left.left, null, null);\nleft_rot.left.left.right = RedBlackTree(-5, 0, left_rot.left.left, null, null);\nleft_rot.right = RedBlackTree(20, 0, left_rot, null, null);\ntree = tree.rotate_left();\nif (!tree.__eq__(left_rot)) {\n    _return_value = false;\n    return _return_value;\n}\ntree = tree.rotate_right();\ntree = tree.rotate_right();\n// Make the left rotation\nvar right_rot = RedBlackTree(-10, 0, null, null, null);\nright_rot.left = RedBlackTree(-20, 0, right_rot, null, null);\nright_rot.right = RedBlackTree(0, 0, right_rot, null, null);\nright_rot.right.left = RedBlackTree(-5, 0, right_rot.right, null, null);\nright_rot.right.right = RedBlackTree(10, 0, right_rot.right, null, null);\nright_rot.right.right.left = RedBlackTree(5, 0, right_rot.right.right, null, null);\nright_rot.right.right.right = RedBlackTree(20, 0, right_rot.right.right, null, null);\nif (!tree.__eq__(right_rot)) {\n    _return_value = false;\n    return _return_value;\n}\n_return_value = true;\nreturn _return_value;\n", "29": "tree = RedBlackTree(-1, 0, null, null, null);\n    for (var i = 0; i < 10; i++) {\n        tree = tree.insert(i);\n    }\n    i = 0;\n    var _return_value = true;\n    return _return_value;", "30": "tree = RedBlackTree(0, 0, null, null, null);\n    tree.insert(8);\n    tree.insert(-8);\n    tree.insert(4);\n    tree.insert(12);\n    tree.insert(10);\n    tree.insert(11);\n    ans = RedBlackTree(0, 0, null, null, null);\n    ans.left = RedBlackTree(-8, 0, ans, null, null);\n    ans.right = RedBlackTree(8, 1, ans, null, null);\n    ans.right.left = RedBlackTree(4, 0, ans.right, null, null);\n    ans.right.right = RedBlackTree(11, 0, ans.right, null, null);\n    ans.right.right.left = RedBlackTree(10, 1, ans.right.right, null, null);\n    ans.right.right.right = RedBlackTree(12, 1, ans.right.right, null, null);\n    var _return_value = tree.__eq__(ans);\n    return _return_value;", "31": "tree = RedBlackTree(0, 0, null, null, null);\n    tree.insert(8);\n    tree.insert(-8);\n    tree.insert(4);\n    tree.insert(12);\n    tree.insert(10);\n    tree.insert(11);\n    if (tree.__contains__(5) \n        || tree.__contains__(-6) \n        || tree.__contains__(-10) \n        || tree.__contains__(13)) {\n        // Found something not in there\n        var _return_value = false;\n        return _return_value;\n    }\n    if (!(tree.__contains__(11) \n        && tree.__contains__(12) \n        && tree.__contains__(-8) \n        && tree.__contains__(0))) {\n        // Didn't find something in there\n        var _return_value = false;\n        return _return_value;\n    }\n    var _return_value = true;\n    return _return_value;", "32": "tree = RedBlackTree(0, 0, null, null, null);\n    tree = tree.insert(-12);\n    tree = tree.insert(8);\n    tree = tree.insert(-8);\n    tree = tree.insert(15);\n    tree = tree.insert(4);\n    tree = tree.insert(12);\n    tree = tree.insert(10);\n    tree = tree.insert(9);\n    tree = tree.insert(11);\n    tree = tree.remove(15);\n    tree = tree.remove(-12);\n    tree = tree.remove(9);\n    if (!tree.check_color_properties()) {\n        var _return_value = false;\n        return _return_value;\n    }\n    if (Array.from(tree.inorder_traverse()).toString() !== [-8, 0, 4, 8, 10, 11, 12].toString()) {\n        var _return_value = false;\n        return _return_value;\n    }\n    var _return_value = true;\n    return _return_value;", "33": "tree = RedBlackTree(0, 0, null, null, null);\n    tree.insert(-16);\n    tree.insert(16);\n    tree.insert(8);\n    tree.insert(24);\n    tree.insert(20);\n    tree.insert(22);\n    tuples = [[-20, null, -16], [-10, -16, 0], [8, 8, 8], [50, 24, null]];\n    for (var i = 0; i < tuples.length; i++) {\n        var val = tuples[i][0];\n        var floor = tuples[i][1];\n        var ceil = tuples[i][2];\n        if (tree.floor(val) !== floor || tree.ceil(val) !== ceil) {\n            var _return_value = false;\n            return _return_value;\n        }\n    }\n    var _return_value = true;\n    return _return_value;", "34": "tree = RedBlackTree(0, 0, null, null, null);\n    tree.insert(-16);\n    tree.insert(16);\n    tree.insert(8);\n    tree.insert(24);\n    tree.insert(20);\n    tree.insert(22);\n    if (tree.get_max() !== 24 || tree.get_min() !== -16) {\n        var _return_value = false;\n        return _return_value;\n    }\n    var _return_value = true;\n    return _return_value;", "35": "tree = RedBlackTree(0, 0, null, null, null);\n    tree = tree.insert(-16);\n    tree.insert(16);\n    tree.insert(8);\n    tree.insert(24);\n    tree.insert(20);\n    tree.insert(22);\n    if (Array.from(tree.inorder_traverse()).toString() !== [-16, 0, 8, 16, 20, 22, 24].toString()) {\n        var _return_value = false;\n        return _return_value;\n    }\n    if (Array.from(tree.preorder_traverse()).toString() !== [0, -16, 16, 8, 22, 20, 24].toString()) {\n        var _return_value = false;\n        return _return_value;\n    }\n    if (Array.from(tree.postorder_traverse()).toString() !== [-16, 8, 20, 24, 22, 16, 0].toString()) {\n        var _return_value = false;\n        return _return_value;\n    }\n    var _return_value = true;\n    return _return_value;", "36": "tree = RedBlackTree(0, 0, null, null, null);\n    tree.insert(-16)\n    tree.insert(16)\n    tree.insert(8)\n    tree.insert(24)\n    tree.insert(20)\n    tree.insert(22);\n    if (Array.from(tree.inorder_traverse()).toString() !== [-16, 0, 8, 16, 20, 22, 24].toString()) {\n        var _return_value = false;\n        return _return_value;\n    }\n    if (Array.from(tree.preorder_traverse()).toString() !== [0, -16, 16, 8, 22, 20, 24].toString()) {\n        var _return_value = false;\n        return _return_value;\n    }\n    if (Array.from(tree.postorder_traverse()).toString() !== [-16, 8, 20, 24, 22, 16, 0].toString()) {\n        var _return_value = false;\n        return _return_value;\n    }\n    var _return_value = true;\n    return _return_value;", "37": "    if (!passes){\n        throw new Error(msg.toString() + \" doesn't work :(\");\n    }\n    console.log(msg.toString() + (passes ? \" works!\" : \" doesn't work :(\"));", "38": "tmp = test_rotations()\n    print_results(\"Rotating right and left\", tmp)\n    tmp = test_insert()\n    print_results(\"Inserting\", tmp)\n    tmp = test_insert_and_search()\n    print_results(\"Searching\", tmp)\n    tmp = test_insert_delete()\n    print_results(\"Deleting\", tmp)\n    tmp = test_floor_ceil()\n    print_results(\"Floor and ceil\", tmp)\n    tmp = test_min_max()\n    print_results(\"Min and max\", tmp)\n    tmp = test_tree_traversal()\n    print_results(\"Tree traversal\", tmp)\n    tmp = test_tree_chaining()\n    print_results(\"Tree traversal\", tmp)\n    console.log(\"Testing tree balancing...\")\n    console.log(\"This should only be a few seconds.\")\n    test_insertion_speed()\n    additional_tests()\n    console.log(\"Done!\")", "39": "tree = RedBlackTree(0, 0, null, null, null)\n    console.assert(tree.__len__() == 1)\n\n    tree = RedBlackTree(0, 0, null, null, null)\n    tree.insert(-16).insert(16).insert(-8).insert(12)\n    tree.insert(-20).insert(8).insert(-4).insert(4)\n    tree.insert(-3).insert(24).insert(-20).insert(20)\n    tree.insert(-1).insert(2).insert(-3).insert(3)\n    tree.insert(10).insert(26)\n\n    tree.right.right.left._remove_repair()\n    console.assert(tree.right.right.left.label == 20)", "0": "test();\n"}