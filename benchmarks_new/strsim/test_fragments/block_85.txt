s = StringDistance()
    nul = null
    tmp = s.distance("a", "b")
    assert_equal(tmp, nul)

    s = NormalizedLevenshtein()
    tmp = s.distance("a", "b")
    assert_equal(tmp, 1.0)

    s = OptimalStringAlignment()
    tmp = s.distance("a", "b")
    assert_equal(tmp, 1)

    s = NormalizedStringDistance()
    tmp = s.distance("a", "b")
    assert_equal(tmp, nul)
    
    s = SIFT4()

    results = [
        ['This is the first string', 'And this is another string', 5, 11.0],
        ['Lorem ipsum dolor sit amet, consectetur adipiscing elit.', 'Amet Lorm ispum dolor sit amet, consetetur adixxxpiscing elit.', 10, 12.0]
    ];

    options = {"maxdistance": 0}
    
    for (var i = 0; i < results.length; i++) {
        var a = results[i][0];
        var b = results[i][1];
        var offset = results[i][2];
        var res = results[i][3];
        tmp = s.distance(a, b, offset, options)
        assert_equal(res, 
                     tmp);
    }

    s = MetricStringDistance()
    tmp = s.distance("a", "b")
    assert_equal(tmp, nul)

    s = Cosine(1)
    tmp = s.distance("a", "b")
    assert_equal(tmp, 1.0)

    s = NormalizedStringSimilarity()
    tmp = s.similarity("a", "b")
    assert_equal(tmp, nul)

    s = StringSimilarity()
    tmp = s.similarity("a", "b")
    assert_equal(tmp, nul)