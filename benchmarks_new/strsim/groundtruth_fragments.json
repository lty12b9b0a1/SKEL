{"1": "return null;", "2": "return null;", "3": "return null;", "4": "if (s0 === null) {\n    throw new TypeError(\"Argument s0 is NoneType.\");\n}\nif (s1 === null) {\n    throw new TypeError(\"Argument s1 is NoneType.\");\n}\nif (s0 === s1) {\n    return 0.0;\n}\nif (s0.length === 0) {\n    return s1.length;\n}\nif (s1.length === 0) {\n    return s0.length;\n}\nvar v0 = new Array(s1.length + 1);\nvar v1 = new Array(s1.length + 1);\nfor (var i = 0; i < v0.length; i++) {\n    v0[i] = i;\n}\nfor (var i = 0; i < s0.length; i++) {\n    v1[0] = i + 1;\n    for (var j = 0; j < s1.length; j++) {\n        var cost = 1;\n        if (s0[i] === s1[j]) {\n            cost = 0;\n        }\n        v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);\n    }\n    var temp = v0;\n    v0 = v1;\n    v1 = temp;\n}\nreturn v0[s1.length];", "5": "        if (s0 === null) {\n            throw new TypeError(\"Argument s0 is NoneType.\");\n        }\n        if (s1 === null) {\n            throw new TypeError(\"Argument s1 is NoneType.\");\n        }\n        if (s0 === s1) {\n            return 0.0;\n        }\n        return s0.length + s1.length - 2 * class_var.length(s0, s1);", "6": "if (s0 === null) {\n    throw new TypeError(\"Argument s0 is NoneType.\");\n}\nif (s1 === null) {\n    throw new TypeError(\"Argument s1 is NoneType.\");\n}\nvar s0_len = s0.length, s1_len = s1.length;\nvar x = s0.slice(), y = s1.slice();\nvar matrix = Array.from({ length: s0_len + 1 }, () => Array(s1_len + 1).fill(0));\nfor (var i = 1; i <= s0_len; i++) {\n    for (var j = 1; j <= s1_len; j++) {\n        if (x[i - 1] === y[j - 1]) {\n            matrix[i][j] = matrix[i - 1][j - 1] + 1;\n        } else {\n            matrix[i][j] = Math.max(matrix[i][j - 1], matrix[i - 1][j]);\n        }\n    }\n}\nreturn matrix[s0_len][s1_len];\n", "7": "class_var.lcs = new LongestCommonSubsequence();", "8": "        if (s0 === null) {\n            throw new TypeError(\"Argument s0 is NoneType.\");\n        }\n        if (s1 === null) {\n            throw new TypeError(\"Argument s1 is NoneType.\");\n        }\n        if (s0 === s1) {\n            return 0.0;\n        }\n        var max_len = Math.max(s0.length, s1.length);\n        if (max_len === 0) {\n            return 0.0;\n        }\n        return 1.0 - (1.0 * class_var.lcs.length(s0, s1)) / max_len;", "9": "class_var.n = n;\nreturn null;", "10": "if (s0 === null) {\n    throw new TypeError(\"Argument s0 is NoneType.\");\n}\nif (s1 === null) {\n    throw new TypeError(\"Argument s1 is NoneType.\");\n}\nif (s0 === s1) {\n    return 0.0;\n}\nvar special = '\\n';\nvar sl = s0.length;\nvar tl = s1.length;\nif (sl === 0 || tl === 0) {\n    return 1.0;\n}\nvar cost = 0;\nif (sl < class_var.n || tl < class_var.n) {\n    for (var i = 0; i < Math.min(sl, tl); i++) {\n        if (s0[i] === s1[i]) {\n            cost += 1;\n        }\n    }\n    return 1.0 - cost / Math.max(sl, tl);\n}\nvar sa = Array(sl + class_var.n - 1).fill('');\nfor (var i = 0; i < sa.length; i++) {\n    if (i < class_var.n - 1) {\n        sa[i] = special;\n    } else {\n        sa[i] = s0[i - class_var.n + 1];\n    }\n}\nvar p = Array(sl + 1).fill(0.0);\nvar d = Array(sl + 1).fill(0.0);\nvar t_j = Array(class_var.n).fill('');\nfor (var i = 0; i < sl + 1; i++) {\n    p[i] = 1.0 * i;\n}\nfor (var j = 1; j < tl + 1; j++) {\n    if (j < class_var.n) {\n        for (var ti = 0; ti < class_var.n - j; ti++) {\n            t_j[ti] = special;\n        }\n        for (var ti = class_var.n - j; ti < class_var.n; ti++) {\n            t_j[ti] = s1[ti - (class_var.n - j)];\n        }\n    } else {\n        t_j = s1.slice(j - class_var.n, j);\n    }\n    d[0] = 1.0 * j;\n    for (var i = 1; i < sl + 1; i++) {\n        cost = 0;\n        var tn = class_var.n;\n        for (var ni = 0; ni < class_var.n; ni++) {\n            if (sa[i - 1 + ni] !== t_j[ni]) {\n                cost += 1;\n            } else if (sa[i - 1 + ni] === special) {\n                tn -= 1;\n            }\n        }\n        var ec = cost / tn;\n        d[i] = Math.min(d[i - 1] + 1, p[i] + 1, p[i - 1] + ec);\n    }\n    var temp = p;\n    p = d;\n    d = temp;\n}\nreturn p[sl] / Math.max(tl, sl);", "11": "if (s0 === null) {\n    throw new TypeError(\"Argument s0 is NoneType.\");\n}\nif (s1 === null) {\n    throw new TypeError(\"Argument s1 is NoneType.\");\n}\nif (s0 === s1) {\n    return 0.0;\n}\nvar inf = s0.length + s1.length;\nvar da = {};\nfor (var i = 0; i < s0.length; i++) {\n    da[s0[i]] = '0';\n}\nfor (var i = 0; i < s1.length; i++) {\n    da[s1[i]] = '0';\n}\nvar h = [];\nfor (var i = 0; i < s0.length + 2; i++) {\n    h.push(new Array(s1.length + 2).fill(0));\n}\nfor (var i = 0; i < s0.length + 1; i++) {\n    h[i + 1][0] = inf;\n    h[i + 1][1] = i;\n}\nfor (var j = 0; j < s1.length + 1; j++) {\n    h[0][j + 1] = inf;\n    h[1][j + 1] = j;\n}\nfor (var i = 1; i < s0.length + 1; i++) {\n    var db = 0;\n    for (var j = 1; j < s1.length + 1; j++) {\n        var i1 = parseInt(da[s1[j - 1]]);\n        var j1 = db;\n        var cost = 1;\n        if (s0[i - 1] === s1[j - 1]) {\n            cost = 0;\n            db = j;\n        }\n        h[i + 1][j + 1] = Math.min(h[i][j] + cost,\n                                   h[i + 1][j] + 1,\n                                   h[i][j + 1] + 1,\n                                   h[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1));\n    }\n    da[s0[i - 1]] = i.toString();\n}\nreturn h[s0.length + 1][s1.length + 1];", "12": "class_var.k = k;\nreturn null;", "13": "return class_var.k;", "14": "var shingles = {};\n    var no_space_str = string.replace(/\\s+/g, \" \");\n    for (var i = 0; i <= no_space_str.length - class_var.k; i++) {\n        var shingle = no_space_str.substring(i, i + class_var.k);\n        var old = shingles[shingle];\n        if (old) {\n            shingles[shingle] = old + 1;\n        } else {\n            shingles[shingle] = 1;\n        }\n    }\n    return shingles;\n", "15": "return null;", "16": "return null;", "17": "return null;", "18": "return 1.0 - class_var.similarity(s0, s1);", "19": "if (s0 === null) {\n    throw new TypeError(\"Argument s0 is NoneType.\");\n}\nif (s1 === null) {\n    throw new TypeError(\"Argument s1 is NoneType.\");\n}\nif (s0 === s1) {\n    return 1.0;\n}\nif (s0.length < class_var.get_k() || s1.length < class_var.get_k()) {\n    return 0.0;\n}\nvar profile0 = class_var.get_profile(s0);\nvar profile1 = class_var.get_profile(s1);\nreturn class_var._dot_product(profile0, profile1) / (class_var._norm(profile0) * class_var._norm(profile1));\n", "20": "return class_var._dot_product(profile0, profile1) / (class_var._norm(profile0) * class_var._norm(profile1));", "21": "var small = profile1;\n    var large = profile0;\n    if (Object.keys(profile0).length < Object.keys(profile1).length) {\n        small = profile0;\n        large = profile1;\n    }\n    var agg = 0.0;\n    for (var k in small) {\n        var v = small[k];\n        var i = large[k];\n        if (!i) {\n            continue;\n        }\n        agg += 1.0 * v * i;\n    }\n    return agg;\n", "22": "var agg = 0.0;\n    for (var k in profile) {\n        var v = profile[k];\n        agg += 1.0 * v * v;\n    }\n    return Math.sqrt(agg);\n", "23": "return null;", "24": "return 1.0 - class_var.similarity(s0, s1);", "25": "if (s0 === null) {\n    throw new TypeError(\"Argument s0 is NoneType.\");\n}\nif (s1 === null) {\n    throw new TypeError(\"Argument s1 is NoneType.\");\n}\nif (s0 === s1) {\n    return 1.0;\n}\nif (s0.length < class_var.get_k() || s1.length < class_var.get_k()) {\n    return 0.0;\n}\nvar profile0 = class_var.get_profile(s0);\nvar profile1 = class_var.get_profile(s1);\nvar union = new Set();\nfor (var ite in profile0) {\n    union.add(ite);\n}\nfor (var ite in profile1) {\n    union.add(ite);\n}\nvar inter = (Object.keys(profile0).length + Object.keys(profile1).length - union.size);\nreturn 1.0 * inter / union.size;", "26": "class_var.threshold = threshold;\nclass_var.three = 3;\nclass_var.jw_coef = 0.1;", "27": "return class_var.threshold;", "28": "if (s0 === null) {\n    throw new TypeError(\"Argument s0 is NoneType.\");\n}\nif (s1 === null) {\n    throw new TypeError(\"Argument s1 is NoneType.\");\n}\nif (s0 === s1) {\n    return 1.0;\n}\nvar mtp = class_var.matches(s0, s1);\nvar m = mtp[0];\nif (m === 0) {\n    return 0.0;\n}\nvar j = (m / s0.length + m / s1.length + (m - mtp[1]) / m) / class_var.three;\nvar jw = j;\nif (j > class_var.get_threshold()) {\n    jw = j + Math.min(class_var.jw_coef, 1.0 / mtp[class_var.three]) * mtp[2] * (1 - j);\n}\nreturn jw;", "29": "return 1.0 - class_var.similarity(s0, s1);", "30": "var max_str, min_str;\n        if (s0.length > s1.length) {\n            max_str = s0;\n            min_str = s1;\n        } else {\n            max_str = s1;\n            min_str = s0;\n        }\n        var ran = Math.max(Math.floor(max_str.length / 2 - 1), 0);\n        var match_indexes = Array(min_str.length).fill(-1);\n        var match_flags = Array(max_str.length).fill(false);\n        var matches = 0;\n        for (var mi = 0; mi < min_str.length; mi++) {\n            var c1 = min_str[mi];\n            for (var xi = Math.max(mi - ran, 0); xi < Math.min(mi + ran + 1, max_str.length); xi++) {\n                if (!match_flags[xi] && c1 === max_str[xi]) {\n                    match_indexes[mi] = xi;\n                    match_flags[xi] = true;\n                    matches++;\n                    break;\n                }\n            }\n        }\n        var ms0 = Array(matches).fill(0);\n        var ms1 = Array(matches).fill(0);\n        var si = 0;\n        for (var i = 0; i < min_str.length; i++) {\n            if (match_indexes[i] !== -1) {\n                ms0[si] = min_str[i];\n                si++;\n            }\n        }\n        si = 0;\n        for (var j = 0; j < max_str.length; j++) {\n            if (match_flags[j]) {\n                ms1[si] = max_str[j];\n                si++;\n            }\n        }\n        var transpositions = 0;\n        for (var mi = 0; mi < ms0.length; mi++) {\n            if (ms0[mi] !== ms1[mi]) {\n                transpositions++;\n            }\n        }\n        var prefix = 0;\n        for (var mi = 0; mi < min_str.length; mi++) {\n            if (s0[mi] === s1[mi]) {\n                prefix++;\n            } else {\n                break;\n            }\n        }\n        return [matches, Math.floor(transpositions / 2), prefix, max_str.length];", "31": "class_var.levenshtein = new Levenshtein();", "32": "        if (s0 === null) {\n            throw new TypeError(\"Argument s0 is NoneType.\");\n        }\n        if (s1 === null) {\n            throw new TypeError(\"Argument s1 is NoneType.\");\n        }\n        if (s0 === s1) {\n            return 0.0;\n        }\n        var m_len = Math.max(s0.length, s1.length);\n        if (m_len === 0) {\n            return 0.0;\n        }\n        return class_var.levenshtein.distance(s0, s1) / m_len;", "33": "return 1.0 - class_var.distance(s0, s1);", "34": "if (s0 === null) {\n    throw new TypeError(\"Argument s0 is NoneType.\");\n}\nif (s1 === null) {\n    throw new TypeError(\"Argument s1 is NoneType.\");\n}\nif (s0 === s1) {\n    return 0.0;\n}\nvar n = s0.length, m = s1.length;\nif (n === 0) {\n    return 1.0 * n;\n}\nif (m === 0) {\n    return 1.0 * m;\n}\nvar d = Array.from({ length: n + 2 }, () => Array(m + 2).fill(0));\nfor (var i = 0; i <= n; i++) {\n    d[i][0] = i;\n}\nfor (var j = 0; j <= m; j++) {\n    d[0][j] = j;\n}\nfor (var i = 1; i <= n; i++) {\n    for (var j = 1; j <= m; j++) {\n        var cost = 1;\n        if (s0[i - 1] === s1[j - 1]) {\n            cost = 0;\n        }\n        d[i][j] = Math.min(d[i - 1][j - 1] + cost, d[i][j - 1] + 1, d[i - 1][j] + 1);\n        if (i > 1 && j > 1 && s0[i - 1] === s1[j - 2] && s0[i - 2] === s1[j - 1]) {\n            d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n        }\n    }\n}\nreturn d[n][m];", "35": "return null;", "36": "return 1.0 - class_var.similarity(s0, s1);", "37": "        if (s0 === null) {\n            throw new TypeError(\"Argument s0 is NoneType.\");\n        }\n        if (s1 === null) {\n            throw new TypeError(\"Argument s1 is NoneType.\");\n        }\n        if (s0 === s1) {\n            return 1.0;\n        }\n        var union = new Set();\n        var profile0 = class_var.get_profile(s0);\n        var profile1 = class_var.get_profile(s1);\n        for (var k in profile0) {\n            union.add(k);\n        }\n        for (var k in profile1) {\n            union.add(k);\n        }\n        var inter = parseInt(Object.keys(profile0).length + Object.keys(profile1).length - union.size);\n        return inter / Math.min(Object.keys(profile0).length, Object.keys(profile1).length);", "38": "return null;", "39": "        if (s0 === null) {\n            throw new TypeError(\"Argument s0 is NoneType.\");\n        }\n        if (s1 === null) {\n            throw new TypeError(\"Argument s1 is NoneType.\");\n        }\n        if (s0 === s1) {\n            return 0.0;\n        }\n        var profile0 = class_var.get_profile(s0);\n        var profile1 = class_var.get_profile(s1);\n        return class_var.distance_profile(profile0, profile1);", "40": "var union = new Set();\n        for (var k in profile0) {\n            union.add(k);\n        }\n        for (var k in profile1) {\n            union.add(k);\n        }\n        var agg = 0;\n        union.forEach(function(k) {\n            var v0 = 0, v1 = 0;\n            if (profile0[k] !== undefined) {\n                v0 = parseInt(profile0[k]);\n            }\n            if (profile1[k] !== undefined) {\n                v1 = parseInt(profile1[k]);\n            }\n            agg += Math.abs(v0 - v1);\n        });\n        return agg;\n", "41": "return Array.from(x);", "42": "return t1 === t2;", "43": "return 1;", "44": "return x;", "45": "return 1;", "46": "return lcss - trans;", "47": "class_var.options = {\n    'maxdistance': 0,\n    'tokenizer': _code0,\n    'tokenmatcher': _code1,\n    'matchingevaluator': _code2,\n    'locallengthevaluator': _code3,\n    'transpositioncostevaluator': _code4,\n    'transpositionsevaluator': _code5\n};\nvar otheroptions = {\n    'tokenizer': {'ngram': class_var.ngramtokenizer, 'wordsplit': class_var.wordsplittokenizer, 'characterfrequency': class_var.characterfrequencytokenizer},\n    'tokematcher': {'sift4tokenmatcher': class_var.sift4tokenmatcher},\n    'matchingevaluator': {'sift4matchingevaluator': class_var.sift4matchingevaluator},\n    'locallengthevaluator': {'rewardlengthevaluator': class_var.rewardlengthevaluator, 'rewardlengthevaluator2': class_var.rewardlengthevaluator2},\n    'transpositioncostevaluator': {'longertranspositionsaremorecostly': class_var.longertranspositionsaremorecostly},\n    'transpositionsevaluator': {}\n};\nif (typeof options === 'object' && options !== null) {\n    for (var k in options) {\n        if (options.hasOwnProperty(k) && class_var.options.hasOwnProperty(k)) {\n            if (k === 'maxdistance') {\n                if (typeof options[k] === 'number') {\n                    class_var.options[k] = options[k];\n                } else {\n                    throw new Error(\"Option maxdistance should be int\");\n                }\n            } else {\n                if (typeof options[k] === 'function') {\n                    class_var.options[k] = options[k];\n                } else {\n                    if (otheroptions[k].hasOwnProperty(options[k])) {\n                        class_var.options[k] = otheroptions[k][options[k]];\n                    } else {\n                        var msg = \"Option \" + k + \" should be callable or one of [\" + Object.keys(otheroptions[k]).join(', ') + \"]\";\n                        throw new Error(msg);\n                    }\n                }\n            }\n        } else {\n            throw new Error(\"Option \" + k + \" not recognized.\");\n        }\n    }\n} else if (options !== null) {\n    throw new Error(\"options should be a dictionary\");\n}\nclass_var.maxdistance = class_var.options['maxdistance'];\nclass_var.tokenizer = class_var.options['tokenizer'];\nclass_var.tokenmatcher = class_var.options['tokenmatcher'];\nclass_var.matchingevaluator = class_var.options['matchingevaluator'];\nclass_var.locallengthevaluator = class_var.options['locallengthevaluator'];\nclass_var.transpositioncostevaluator = class_var.options['transpositioncostevaluator'];\nclass_var.transpositionsevaluator = class_var.options['transpositionsevaluator'];", "48": "var result = [];\n        if (!s) {\n            return result;\n        }\n        for (var i = 0; i < s.length - n - 1; i++) {\n            result.push(s.substring(i, i + n));\n        }\n        return result;", "49": "if (!s) {\n    return [];\n}\nreturn s.split(' ');\n", "50": "var letters = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    return letters.map(function(x) { return s.toLowerCase().split(x).length - 1; });", "51": "var similarity = 1 - SIFT4().distance(t1, t2, 5) / Math.max(t1.length, t2.length);\n        return similarity > 0.7;", "52": "var similarity = 1 - SIFT4().distance(t1, t2, 5) / Math.max(t1.length, t2.length);\n    return similarity;", "53": "if (l < 1) {\n    return l;\n}\nreturn l - 1 / (l + 1);", "54": "return Math.pow(l, 1.5);", "55": "return Math.abs(c2 - c1) / 9 + 1;", "56": "options = new SIFT4Options(options);\nvar t1 = options.tokenizer(s1), t2 = options.tokenizer(s2);\nvar l1 = t1.length, l2 = t2.length;\nif (l1 === 0) {\n    return l2;\n}\nif (l2 === 0) {\n    return l1;\n}\nvar c1 = 0, c2 = 0, lcss = 0, local_cs = 0, trans = 0, offset_arr = [];\nwhile (c1 < l1 && c2 < l2) {\n    if (options.tokenmatcher(t1[c1], t2[c2])) {\n        local_cs += options.matchingevaluator(t1[c1], t2[c2]);\n        var isTrans = false;\n        var i = 0;\n        while (i < offset_arr.length) {\n            var ofs = offset_arr[i];\n            if (c1 <= ofs.c1 || c2 <= ofs.c2) {\n                isTrans = Math.abs(c2 - c1) >= Math.abs(ofs.c2 - ofs.c1);\n                if (isTrans) {\n                    trans += options.transpositioncostevaluator(c1, c2);\n                } else {\n                    if (!ofs.trans) {\n                        ofs.trans = true;\n                        trans += options.transpositioncostevaluator(ofs.c1, ofs.c2);\n                    }\n                }\n                break;\n            } else {\n                if (c1 > ofs.c2 && c2 > ofs.c1) {\n                    offset_arr.splice(i, 1);\n                } else {\n                    i++;\n                }\n            }\n        }\n        offset_arr.push({c1: c1, c2: c2, trans: isTrans});\n    } else {\n        lcss += options.locallengthevaluator(local_cs);\n        local_cs = 0;\n        if (c1 !== c2) {\n            c1 = c2 = Math.min(c1, c2);\n        }\n        for (i = 0; i < maxoffset; i++) {\n            if ((c1 + i < l1) || (c2 + i < l2)) {\n                if ((c1 + i < l1) && options.tokenmatcher(t1[c1 + i], t2[c2])) {\n                    c1 += i - 1;\n                    c2 -= 1;\n                    break;\n                }\n                if ((c2 + i < l2) && options.tokenmatcher(t1[c1], t2[c2 + i])) {\n                    c1 -= 1;\n                    c2 += i - 1;\n                    break;\n                }\n            }\n        }\n    }\n    c1++;\n    c2++;\n    if (options.maxdistance) {\n        var temporarydistance = options.locallengthevaluator(Math.max(c1, c2)) - options.transpositionsevaluator(lcss, trans);\n        if (temporarydistance >= options.maxdistance) {\n            return Math.round(temporarydistance);\n        }\n    }\n    if (c1 >= l1 || c2 >= l2) {\n        lcss += options.locallengthevaluator(local_cs);\n        local_cs = 0;\n        c1 = c2 = Math.min(c1, c2);\n    }\n}\nlcss += options.locallengthevaluator(local_cs);\nreturn Math.round(options.locallengthevaluator(Math.max(l1, l2)) - options.transpositionsevaluator(lcss, trans));", "57": "return null;", "58": "return 1.0 - class_var.similarity(s0, s1);", "59": "if (s0 === null) {\n    throw new TypeError(\"Argument s0 is NoneType.\");\n}\nif (s1 === null) {\n    throw new TypeError(\"Argument s1 is NoneType.\");\n}\nif (s0 === s1) {\n    return 1.0;\n}\nvar union = new Set();\nvar profile0 = class_var.get_profile(s0);\nvar profile1 = class_var.get_profile(s1);\nfor (var k in profile0) {\n    union.add(k);\n}\nfor (var k in profile1) {\n    union.add(k);\n}\nvar inter = parseInt(Object.keys(profile0).length + Object.keys(profile1).length - union.size);\nreturn 2.0 * inter / (Object.keys(profile0).length + Object.keys(profile1).length);\n", "60": "return 1.0;", "61": "return 1.0;", "62": "return 1.0;", "63": "class_var.substitution_cost_fn = substitution_cost_fn;\nclass_var.insertion_cost_fn = insertion_cost_fn;\nclass_var.deletion_cost_fn = deletion_cost_fn;\nreturn null;\n", "64": "if (s0 === null) {\n    throw new TypeError(\"Argument s0 is NoneType.\");\n}\nif (s1 === null) {\n    throw new TypeError(\"Argument s1 is NoneType.\");\n}\nif (s0 === s1) {\n    return 0.0;\n}\nif (s0.length === 0) {\n    return s1.split('').reduce(function(cost, char) {\n        return cost + class_var.insertion_cost_fn(char);\n    }, 0);\n}\nif (s1.length === 0) {\n    return s0.split('').reduce(function(cost, char) {\n        return cost + class_var.deletion_cost_fn(char);\n    }, 0);\n}\nvar v0 = new Array(s1.length + 1).fill(0.0);\nvar v1 = new Array(s1.length + 1).fill(0.0);\nv0[0] = 0;\nfor (var i = 1; i < v0.length; i++) {\n    v0[i] = v0[i - 1] + class_var.insertion_cost_fn(s1[i - 1]);\n}\nfor (var i = 0; i < s0.length; i++) {\n    var s0i = s0[i];\n    var deletion_cost = class_var.deletion_cost_fn(s0i);\n    v1[0] = v0[0] + deletion_cost;\n    for (var j = 0; j < s1.length; j++) {\n        var s1j = s1[j];\n        var cost = 0;\n        if (s0i !== s1j) {\n            cost = class_var.substitution_cost_fn(s0i, s1j);\n        }\n        var insertion_cost = class_var.insertion_cost_fn(s1j);\n        v1[j + 1] = Math.min(v1[j] + insertion_cost, v0[j + 1] + deletion_cost, v0[j] + cost);\n    }\n    var temp = v0;\n    v0 = v1;\n    v1 = temp;\n}\nreturn v0[s1.length];", "65": "if (a !== b) {\n    throw new Error(\"MyLogError MISMATCH\");\n}", "66": "a = Levenshtein()\n    s0 = \"\"\n    s1 = \"\"\n    s2 = input_shanghai\n    s3 = input_shanghai_city\n    assert_equal(a.distance(s0, s1), 0.0)\n    assert_equal(a.distance(s0, s2), 2)\n    assert_equal(a.distance(s0, s3), 3)\n    assert_equal(a.distance(s1, s2), 2)\n    assert_equal(a.distance(s1, s3), 3)\n    assert_equal(a.distance(s2, s3), 1)", "67": "a = LongestCommonSubsequence()\n    s0 = \"\"\n    s1 = \"\"\n    s2 = input_shanghai\n    s3 = input_shanghai_city\n    assert_equal(0, a.distance(s0, s1))\n    assert_equal(2, a.distance(s0, s2))\n    assert_equal(3, a.distance(s0, s3))\n    assert_equal(1, a.distance(s2, s3))\n    assert_equal(2, a.length(s2, s3))\n    assert_equal(4, a.distance('AGCAT', 'GAC'))\n    assert_equal(2, a.length('AGCAT', 'GAC'))", "68": "a = MetricLCS()\n    s0 = \"\"\n    s1 = \"\"\n    s2 = input_shanghai\n    s3 = input_shanghai_city\n    assert_equal(a.distance(s0, s1), 0.0)\n    assert_equal(a.distance(s0, s2), 1.0)\n    assert_equal(a.distance(s0, s3), 1.0)\n    assert_equal(a.distance(s1, s2), 1.0)\n    assert_equal(a.distance(s1, s3), 1.0)\n    assert_equal(Math.round(a.distance(s2, s3) * 100) / 100, 0.33)", "69": "a = NGram(2)\n    s0 = \"\"\n    s1 = \"\"\n    s2 = input_shanghai\n    s3 = input_shanghai_city\n    assert_equal(a.distance(s0, s1), 0.0)\n    assert_equal(a.distance(s0, s2), 1.0)\n    assert_equal(a.distance(s0, s3), 1.0)\n    assert_equal(a.distance(s1, s2), 1.0)\n    assert_equal(a.distance(s1, s3), 1.0)\n    assert_equal(Math.round(a.distance(s2, s3) * 100) / 100, 0.33)", "70": "a = Damerau()\n    s0 = \"\"\n    s1 = \"\"\n    s2 = input_shanghai\n    s3 = input_shanghai_city\n    assert_equal(a.distance(s0, s1), 0.0)\n    assert_equal(a.distance(s0, s2), 2)\n    assert_equal(a.distance(s0, s3), 3)\n    assert_equal(a.distance(s1, s2), 2)\n    assert_equal(a.distance(s1, s3), 3)\n    assert_equal(a.distance(s2, s3), 1)", "71": "cos = Cosine(1);\n    s = ['', ' ', 'Shanghai', 'ShangHai', 'Shang Hai'];\n    assert_equal(0.0000, \n        parseFloat(cos.distance(s[0], s[0]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(cos.similarity(s[0], s[0]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(cos.distance(s[0], s[1]).toFixed(4)));\n    assert_equal(0.0000, \n        parseFloat(cos.similarity(s[0], s[1]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(cos.distance(s[0], s[2]).toFixed(4)));\n    assert_equal(0.0000, \n        parseFloat(cos.similarity(s[0], s[2]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(cos.distance(s[0], s[3]).toFixed(4)));\n    assert_equal(0.0000, \n        parseFloat(cos.similarity(s[0], s[3]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(cos.distance(s[0], s[4]).toFixed(4)));\n    assert_equal(0.0000, \n        parseFloat(cos.similarity(s[0], s[4]).toFixed(4)));\n\n    assert_equal(0.0000, \n        parseFloat(cos.distance(s[1], s[1]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(cos.similarity(s[1], s[1]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(cos.distance(s[1], s[2]).toFixed(4)));\n    assert_equal(0.0000, \n        parseFloat(cos.similarity(s[1], s[2]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(cos.distance(s[1], s[3]).toFixed(4)));\n    assert_equal(0.0000, \n        parseFloat(cos.similarity(s[1], s[3]).toFixed(4)));\n    assert_equal(0.6985, \n        parseFloat(cos.distance(s[1], s[4]).toFixed(4)));\n    assert_equal(0.3015, \n        parseFloat(cos.similarity(s[1], s[4]).toFixed(4)));\n\n    assert_equal(0.0000, \n        parseFloat(cos.distance(s[2], s[2]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(cos.similarity(s[2], s[2]).toFixed(4)));\n    assert_equal(0.0871, \n        parseFloat(cos.distance(s[2], s[3]).toFixed(4)));\n    assert_equal(0.9129, \n        parseFloat(cos.similarity(s[2], s[3]).toFixed(4)));\n    assert_equal(0.1296, \n        parseFloat(cos.distance(s[2], s[4]).toFixed(4)));\n    assert_equal(0.8704, \n        parseFloat(cos.similarity(s[2], s[4]).toFixed(4)));\n\n    assert_equal(0.0000, \n        parseFloat(cos.distance(s[3], s[3]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(cos.similarity(s[3], s[3]).toFixed(4)));\n    assert_equal(0.0465, \n        parseFloat(cos.distance(s[3], s[4]).toFixed(4)));\n    assert_equal(0.9535, \n        parseFloat(cos.similarity(s[3], s[4]).toFixed(4)));\n    \n    assert_equal(0.0000, \n        parseFloat(cos.distance(s[4], s[4]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(cos.similarity(s[4], s[4]).toFixed(4)));", "72": "var jaccard = Jaccard(1);\n    var s = ['', ' ', 'Shanghai', 'ShangHai', 'Shang Hai'];\n    assert_equal(0.0000, \n        parseFloat(jaccard.distance(s[0], s[0]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(jaccard.similarity(s[0], s[0]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(jaccard.distance(s[0], s[1]).toFixed(4)));\n    assert_equal(0.0000, \n        parseFloat(jaccard.similarity(s[0], s[1]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(jaccard.distance(s[0], s[2]).toFixed(4)));\n    assert_equal(0.0000, \n        parseFloat(jaccard.similarity(s[0], s[2]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(jaccard.distance(s[0], s[3]).toFixed(4)));\n    assert_equal(0.0000, \n        parseFloat(jaccard.similarity(s[0], s[3]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(jaccard.distance(s[0], s[4]).toFixed(4)));\n    assert_equal(0.0000, \n        parseFloat(jaccard.similarity(s[0], s[4]).toFixed(4)));\n\n    assert_equal(0.0000, \n        parseFloat(jaccard.distance(s[1], s[1]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(jaccard.similarity(s[1], s[1]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(jaccard.distance(s[1], s[2]).toFixed(4)));\n    assert_equal(0.0000, \n        parseFloat(jaccard.similarity(s[1], s[2]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(jaccard.distance(s[1], s[3]).toFixed(4)));\n    assert_equal(0.0000, \n        parseFloat(jaccard.similarity(s[1], s[3]).toFixed(4)));\n    assert_equal(0.8750, \n        parseFloat(jaccard.distance(s[1], s[4]).toFixed(4)));\n    assert_equal(0.1250, \n        parseFloat(jaccard.similarity(s[1], s[4]).toFixed(4)));\n\n    assert_equal(0.0000, \n        parseFloat(jaccard.distance(s[2], s[2]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(jaccard.similarity(s[2], s[2]).toFixed(4)));\n    assert_equal(0.1429, \n        parseFloat(jaccard.distance(s[2], s[3]).toFixed(4)));\n    assert_equal(0.8571, \n        parseFloat(jaccard.similarity(s[2], s[3]).toFixed(4)));\n    assert_equal(0.2500, \n        parseFloat(jaccard.distance(s[2], s[4]).toFixed(4)));\n    assert_equal(0.7500, \n        parseFloat(jaccard.similarity(s[2], s[4]).toFixed(4)));\n\n    assert_equal(0.0000, \n        parseFloat(jaccard.distance(s[3], s[3]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(jaccard.similarity(s[3], s[3]).toFixed(4)));\n    assert_equal(0.1250, \n        parseFloat(jaccard.distance(s[3], s[4]).toFixed(4)));\n    assert_equal(0.8750, \n        parseFloat(jaccard.similarity(s[3], s[4]).toFixed(4)));\n    \n    assert_equal(0.0000, \n        parseFloat(jaccard.distance(s[4], s[4]).toFixed(4)));\n    assert_equal(1.0000, \n        parseFloat(jaccard.similarity(s[4], s[4]).toFixed(4)));", "73": "var a = new JaroWinkler(0.7);\n    var s0 = \"\";\n    var s1 = \"\";\n    var s2 = input_shanghai;\n    var s3 = input_shanghai_city;\n\n    assert_equal(\n        a.distance(s0, s1), 0.0);\n    assert_equal(\n        a.distance(s0, s2), 1.0);\n    assert_equal(\n        a.distance(s0, s3), 1.0);\n    assert_equal(\n        a.distance(s1, s2), 1.0);\n    assert_equal(\n        a.distance(s1, s3), 1.0);\n    assert_equal(\n        Math.round(a.distance(s2, s3) * 10000) / 10000, 0.0889);\n\n    assert_equal(\n        a.similarity(s0, s1), 1.0);\n    assert_equal(\n        a.similarity(s0, s2), 0.0);\n    assert_equal(\n        a.similarity(s0, s3), 0.0);\n    assert_equal(\n        a.similarity(s1, s2), 0.0);\n    assert_equal(\n        a.similarity(s1, s3), 0.0);\n    assert_equal(\n        Math.round(a.similarity(s2, s3) * 10000) / 10000, 0.9111);", "74": "var a = new NormalizedLevenshtein();\n    var s0 = \"\";\n    var s1 = \"\";\n    var s2 = input_shanghai\n    s3 = input_shanghai_city\n\n    assert_equal(\n        a.distance(s0, s1), 0.0);\n    assert_equal(\n        a.distance(s0, s2), 1.0);\n    assert_equal(\n        a.distance(s0, s3), 1.0);\n    assert_equal(\n        a.distance(s1, s2), 1.0);\n    assert_equal(\n        a.distance(s1, s3), 1.0);\n    assert_equal(\n        Math.round(a.distance(s2, s3) * 100) / 100, 0.33);\n\n    assert_equal(\n        a.similarity(s0, s1), 1.0);\n    assert_equal(\n        a.similarity(s0, s2), 0.0);\n    assert_equal(\n        a.similarity(s0, s3), 0.0);\n    assert_equal(\n        a.similarity(s1, s2), 0.0);\n    assert_equal(\n        a.similarity(s1, s3), 0.0);\n    assert_equal(\n        Math.round(a.similarity(s2, s3) * 100) / 100, 0.67);", "75": "a = OptimalStringAlignment()\n    s0 = \"\"\n    s1 = \"\"\n    s2 = input_shanghai\n    s3 = input_shanghai_city\n    assert_equal(a.distance(s0, s1), 0.0)\n    assert_equal(a.distance(s0, s2), 0.0)\n    assert_equal(a.distance(s0, s3), 0.0)\n    assert_equal(a.distance(s1, s2), 0.0)\n    assert_equal(a.distance(s1, s3), 0.0)\n    assert_equal(Math.round(a.distance(s2, s3) * 100) / 100, 1)", "76": "sim = OverlapCoefficient(3)\n    s1 = \"eat\"\n    s2 = \"eating\"\n    actual = sim.distance(s1, s2)\n    assert_equal(0, actual)", "77": "sim = OverlapCoefficient(3)\n    s1 = \"eat\"\n    s2 = \"eating\"\n    actual = sim.similarity(s1, s2)\n    assert_equal(1, actual)", "78": "sim = OverlapCoefficient(3)\n    s1 = \"eat\"\n    s2 = \"eating\"\n    actual = sim.similarity(s1, s2)\n    assert_equal(1, actual)", "79": "sim = OverlapCoefficient(2)\n    s1 = \"car\"\n    s2 = \"bar\"\n    assert_equal(1 / 2,\n    sim.similarity(s1, s2))\n    assert_equal(1 / 2,\n    sim.distance(s1, s2))", "80": "a = QGram(1)\n    s0 = \"\"\n    s1 = \"\"\n    s2 = input_shanghai\n    s3 = input_shanghai_city\n    assert_equal(a.distance(s0, s1), 0.0)\n    assert_equal(\n    a.distance(s0, s2), 2)\n    assert_equal(\n    a.distance(s0, s3), 3)\n    assert_equal(\n    a.distance(s1, s2), 2)\n    assert_equal(\n    a.distance(s1, s3), 3)\n    assert_equal(\n    a.distance(s2, s3), 1)", "81": "s = SIFT4();\n    \n    results = [\n        ['This is the first string', 'And this is another string', 5, 11.0],\n        ['Lorem ipsum dolor sit amet, consectetur adipiscing elit.', 'Amet Lorm ispum dolor sit amet, consetetur adixxxpiscing elit.', 10, 12.0]\n    ];\n\n    for (var i = 0; i < results.length; i++) {\n        var a = results[i][0];\n        var b = results[i][1];\n        var offset = results[i][2];\n        var res = results[i][3];\n        assert_equal(res, \n                     s.distance(a, b, offset, null));\n    }", "82": "var a = SorensenDice(2);\n    var s2 = input_shanghai\n    s3 = input_shanghai_city\n    assert_equal(\n        Math.round(a.distance(s2, s3) * 100) / 100, 0.33);\n    assert_equal(\n        Math.round(a.similarity(s2, s3) * 100) / 100, 0.67);", "83": "a = WeightedLevenshtein(default_substitution_cost, default_insertion_cost, default_deletion_cost)\n    s0 = \"\"\n    s1 = \"\"\n    s2 = input_shanghai\n    s3 = input_shanghai_city\n    assert_equal(a.distance(s0, s1), 0.0)\n    assert_equal(a.distance(s0, s2), 2)\n    assert_equal(a.distance(s0, s3), 3)\n    assert_equal(a.distance(s1, s2), 2)\n    assert_equal(a.distance(s1, s3), 3)\n    assert_equal(a.distance(s2, s3), 1)", "84": "    test_levenshtein()\n    test_longest_common_subsequence()\n    test_metric_lcs()\n    test_ngram()\n    test_damerau()\n    test_cosine()\n    test_jaccard()\n    test_jarowinkler()\n    test_normalized_levenshtein()\n    test_optimal_string_alignment()\n    test_overlap_coefficient_0()\n    test_overlap_coefficient_1()\n    test_overlap_coefficient_2()\n    test_overlap_coefficient_3()\n    test_qgram()\n    test_sift4()\n    test_sorensen_dice()\n    test_weighted_levenshtein()\n    additional_tests()", "85": "s = StringDistance()\n    nul = null\n    tmp = s.distance(\"a\", \"b\")\n    assert_equal(tmp, nul)\n\n    s = NormalizedLevenshtein()\n    tmp = s.distance(\"a\", \"b\")\n    assert_equal(tmp, 1.0)\n\n    s = OptimalStringAlignment()\n    tmp = s.distance(\"a\", \"b\")\n    assert_equal(tmp, 1)\n\n    s = NormalizedStringDistance()\n    tmp = s.distance(\"a\", \"b\")\n    assert_equal(tmp, nul)\n    \n    s = SIFT4()\n\n    results = [\n        ['This is the first string', 'And this is another string', 5, 11.0],\n        ['Lorem ipsum dolor sit amet, consectetur adipiscing elit.', 'Amet Lorm ispum dolor sit amet, consetetur adixxxpiscing elit.', 10, 12.0]\n    ];\n\n    options = {\"maxdistance\": 0}\n    \n    for (var i = 0; i < results.length; i++) {\n        var a = results[i][0];\n        var b = results[i][1];\n        var offset = results[i][2];\n        var res = results[i][3];\n        tmp = s.distance(a, b, offset, options)\n        assert_equal(res, \n                     tmp);\n    }\n\n    s = MetricStringDistance()\n    tmp = s.distance(\"a\", \"b\")\n    assert_equal(tmp, nul)\n\n    s = Cosine(1)\n    tmp = s.distance(\"a\", \"b\")\n    assert_equal(tmp, 1.0)\n\n    s = NormalizedStringSimilarity()\n    tmp = s.similarity(\"a\", \"b\")\n    assert_equal(tmp, nul)\n\n    s = StringSimilarity()\n    tmp = s.similarity(\"a\", \"b\")\n    assert_equal(tmp, nul)", "0": "var _SPACE_PATTERN = new RegExp(\"\\\\s+\", \"g\");\n\ntest()"}