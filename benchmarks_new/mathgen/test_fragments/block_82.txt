tmp = bcd_to_decimal(10000)
    a = tmp[0]
    b = tmp[1]
    assert_equal(a, 'Integer of Binary Coded Decimal &4 =& ')
    assert_equal(b, '&18304&')
    tmp = binary_2s_complement(10)
    a = tmp[0]
    b = tmp[1]
    assert_equal(a, "2^s complement of &1100000 = &")
    assert_equal(b, '&100000&')
    tmp = binary_complement_1s(10)
    a = tmp[0]
    b = tmp[1]
    assert_equal(a, '&01110 = &')
    assert_equal(b, '&10001&')
    tmp = binary_to_decimal(10)
    a = tmp[0]
    b = tmp[1]
    assert_equal(a, '&1100&')
    assert_equal(b, '&12&')
    tmp = binary_to_hex(10)
    a = tmp[0]
    b = tmp[1]
    assert_equal(a, '&1100&')
    assert_equal(b, '&0xc&')
    tmp = decimal_to_bcd(10000)
    a = tmp[0]
    b = tmp[1]
    assert_equal(a, 'BCD of Decimal Number &4160 = &')
    assert_equal(b, '&1040&')
    tmp = decimal_to_binary(99)
    a = tmp[0]
    b = tmp[1]
    assert_equal(a, 'Binary of &21 = &')
    assert_equal(b, '&10101&')
    tmp = decimal_to_hexadeci(1000)
    a = tmp[0]
    b = tmp[1]
    assert_equal(a, 'Hexadecimal of &384 = &')
    assert_equal(b, '&0x180&')
    tmp = decimal_to_octal(4096)
    a = tmp[0]
    b = tmp[1]
    assert_equal(a, 'The decimal number &3762& in octal is: ')
    assert_equal(b, '&0o7262&')
    tmp = fibonacci_series(1)
    a = tmp[0]
    b = tmp[1]
    assert_equal(a, 'The Fibonacci Series of the first &18& numbers is ?')
    assert_equal(b, '&0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597&')
    tmp = modulo_division(99, 99)
    a = tmp[0]
    b = tmp[1]
    assert_equal(a, '&77& % &52& = &')
    assert_equal(b, '&25&')
    tmp = nth_fibonacci_number(100)
    a = tmp[0]
    b = tmp[1]
    assert_equal(a, 'What is the 63th Fibonacci number?')
    assert_equal(b, '&6557470319842&')