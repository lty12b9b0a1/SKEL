var tmp = addition(10, 20)
    assert_iter_equal(tmp, ['&4+5=&', '&9&'])
    for (var i = 0; i < 4; i ++) {
        tmp = compare_fractions(2)
    }
    assert_iter_equal(tmp, ['Which symbol represents the comparison between &\\frac{1}{2}& and &\\frac{1}{2}&?', '='])
    for (var i = 0; i < 3; i ++) {
        tmp = divide_fractions(2)
    }
    assert_iter_equal(tmp, ['&\\frac{2}{1}\\div\\frac{1}{2}=&', '&\\frac{4}{1}&'])

    for (var i = 0; i < 5; i ++) {
        tmp = fraction_multiplication(2)
    }
    assert_iter_equal(tmp, ['&\\frac{2}{1}\\cdot\\frac{2}{1}=&', '&\\frac{4}{1}&'])
    
    tmp = is_composite(4)
    assert_iter_equal(tmp, ['Is &4& composite?', 'Yes'])

    tmp = is_prime(2)
    assert_iter_equal(tmp, ['Is &2& prime?', 'Yes'])

    tmp = is_prime(3)
    assert_iter_equal(tmp, ['Is &3& prime?', 'Yes'])

    for (var i = 0; i < 4; i ++) {
        tmp = is_prime(36)
    }
    assert_iter_equal(tmp, ['Is &11& prime?', 'Yes'])

    tmp = dice_sum_probability(1)
    assert_iter_equal(tmp, ['If &1& dice are rolled at the same time, the probability of getting a sum of &1 =&', '\\frac{1}{6}'])

    for (var i = 0; i < 4; i ++) {
        tmp = dice_sum_probability(3)
    }
    assert_iter_equal(tmp, ['If &3& dice are rolled at the same time, the probability of getting a sum of &9 =&', '\\frac{25}{216}'])

    tmp = complementary_and_supplementary_angle(2, 3)
    tmp = complementary_and_supplementary_angle(2, 4)
    tmp = complementary_and_supplementary_angle(2, 5)
    tmp = complementary_and_supplementary_angle(2, 6)
    assert_iter_equal(tmp, ['The supplementary angle of 2 =', '178'])

    tmp = equation_of_line_from_two_points(3, 2)
    tmp = equation_of_line_from_two_points(4, 2)
    tmp = equation_of_line_from_two_points(6, 6)
    tmp = equation_of_line_from_two_points(8, 2)
    tmp = equation_of_line_from_two_points(10, 2)
    tmp = equation_of_line_from_two_points(16, 4)
    tmp = equation_of_line_from_two_points(36, 4)
    assert_iter_equal(tmp, ['What is the equation of the line between points (5,34) and (7,4) in slope-intercept form?', 'y = -15x + 109'])

    for (var i = 0; i < 15; i ++) {
        tmp = equation_of_line_from_two_points(1, 0)
    }
    assert_iter_equal(tmp, ['What is the equation of the line between points (0,1) and (1,1) in slope-intercept form?', 'y = 1'])

    tmp = is_composite(0)
    assert_iter_equal(tmp, ['Is &1& composite?', 'No'])