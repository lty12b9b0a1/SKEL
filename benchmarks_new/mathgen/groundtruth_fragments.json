{"1": "var a = user_randint(-max_a, max_a);\n    var b = user_randint(-max_b, max_b);\n    var absDiff = Math.abs(a - b);\n    return [`&|${a}-${b}|=&`, `&${absDiff}&`];", "2": "    if (max_addend > max_sum) {\n        max_addend = max_sum;\n    }\n    var a = user_randint(0, max_addend);\n    var b = user_randint(0, Math.min((max_sum - a), max_addend));\n    var c = a + b;\n    var problem = `&${a}+${b}=&`;\n    var solution = `&${c}&`;\n    return [problem, solution];", "3": "var a = user_randint(1, max_val);\n    var b = user_randint(1, max_val);\n    var c = user_randint(1, max_val);\n    var d = user_randint(1, max_val);\n    while (a === b) {\n        b = user_randint(1, max_val);\n    }\n    while (c === d) {\n        d = user_randint(1, max_val);\n    }\n    var first = a / b;\n    var second = c / d;\n    var solution;\n    if (first > second) {\n        solution = \">\";\n    } else if (first < second) {\n        solution = \"<\";\n    } else {\n        solution = \"=\";\n    }\n    var problem = `Which symbol represents the comparison between &\\\\frac{${a}}{${b}}& and &\\\\frac{${c}}{${d}}&?`;\n    return [problem, solution];\n", "4": "var b = user_randint(min_no, max_no);\n    var a = Math.cbrt(b);\n    return [\"What is the cube root of: &\\\\sqrt[3]{\" + b + \"}=& to 2 decimal places?\", \"&\" + a.toFixed(2) + \"&\"];", "5": "        while (y) {\n            var temp = x;\n            x = y;\n            y = temp % y;\n        }\n        return x;", "6": "var a = user_randint(1, max_val);\n    var b = user_randint(1, max_val);\n    while (a === b) {\n        b = user_randint(1, max_val);\n    }\n    var c = user_randint(1, max_val);\n    var d = user_randint(1, max_val);\n    while (c === d) {\n        d = user_randint(1, max_val);\n    }\n    var tmp_n = a * d;\n    var tmp_d = b * c;\n    var gcd = calculate_gcd(tmp_n, tmp_d);\n    var sol_numerator = Math.floor(tmp_n / gcd);\n    var sol_denominator = Math.floor(tmp_d / gcd);\n    return [`&\\\\frac{${a}}{${b}}\\\\div\\\\frac{${c}}{${d}}=&`, `&\\\\frac{${sol_numerator}}{${sol_denominator}}&`];\n", "7": "var a = user_randint(1, max_a);\n    var b = user_randint(1, max_b);\n    var divisor = a * b;\n    var dividend = user_choice_func1([a, b]);\n    var quotient = Math.floor(divisor / dividend);\n    return ['&' + divisor + '\\\\div' + dividend + '=&', '&' + quotient + '&'];", "8": "var base = user_randint(1, max_base);\n    var expo = user_randint(1, max_expo);\n    return [`&${base}^{${expo}}=&`, `&${Math.pow(base, expo)}&`];", "9": "var a = user_randint(0, max_input);\n    var n = a;\n    var b = 1;\n    while (a != 1 && n > 0) {\n        b *= n;\n        n -= 1;\n    }\n    return [`&${a}! =&`, `&${b}&`];", "10": "        while (y) {\n            var temp = x;\n            x = y;\n            y = temp % y;\n        }\n        return x;", "11": "var a = user_randint(1, max_val);\n    var b = user_randint(1, max_val);\n    var c = user_randint(1, max_val);\n    var d = user_randint(1, max_val);\n    while (a == b) {\n        b = user_randint(1, max_val);\n    }\n    while (c == d) {\n        d = user_randint(1, max_val);\n    }\n    var tmp_n = a * c;\n    var tmp_d = b * d;\n    var gcd = calculate_gcd(tmp_n, tmp_d);\n    var problem = `&\\\\frac{${a}}{${b}}\\\\cdot\\\\frac{${c}}{${d}}=&`;\n    var solution;\n    if (tmp_d == 1 || tmp_d == gcd) {\n        solution = `&\\\\frac{${tmp_n}}{${gcd}}&`;\n    } else {\n        solution = `&\\\\frac{${Math.floor(tmp_n / gcd)}}{${Math.floor(tmp_d / gcd)}}&`;\n    }\n    return [problem, solution];\n", "12": "var a = user_randint(0, max_divid);\n    var b = user_randint(1, Math.min(max_res, max_divid));\n    var c = parseFloat((a / b).toFixed(2));\n    return ['&' + a + '\\\\div' + b + '=&', '&' + c + '&'];", "13": "number1 = Math.abs(number1);\nnumber2 = Math.abs(number2);\nwhile (number2 > 0) {\n    var temp = number1;\n    number1 = number2;\n    number2 = temp % number2;\n}\nreturn number1;", "14": "numbers_count = Math.max(numbers_count, 2);\n    var numbers = [];\n    for (var _i = 0; _i < numbers_count; _i++) {\n        numbers.push(user_randint(0, max_num));\n    }\n    var greatestCommonDivisor = greatestCommonDivisorOfTwoNumbers(numbers[0], numbers[1]);\n    for (var index = 1; index < numbers_count; index++) {\n        greatestCommonDivisor = greatestCommonDivisorOfTwoNumbers(numbers[index], greatestCommonDivisor);\n    }\n    var fix_bug = numbers.join(\",\");\n    return ['&GCD(' + fix_bug + ')=&', '&' + greatestCommonDivisor + '&'];\n", "15": "var a = user_randint(2, max_num);\n    var problem = \"Is &\" + a + \"& composite?\";\n    if (a === 0 || a === 1) {\n        return [problem, \"No\"];\n    }\n    for (var i = 2; i < a; i++) {\n        if (a % i === 0) {\n            return [problem, \"Yes\"];\n        }\n    }\n    var solution = \"No\";\n    return [problem, solution];", "16": "var a = user_randint(2, max_num);\n    var problem = \"Is &\" + a + \"& prime?\";\n    if (a === 2) {\n        return [problem, \"Yes\"];\n    }\n    if (a % 2 === 0) {\n        return [problem, \"No\"];\n    }\n    for (var i = 3; i <= Math.floor(a / 2) + 1; i += 2) {\n        if (a % i === 0) {\n            return [problem, \"No\"];\n        }\n    }\n    var solution = \"Yes\";\n    return [problem, solution];\n", "17": "var a = user_randint(0, max_multi);\n    var b = user_randint(0, max_multi);\n    var c = a * b;\n    return ['&' + a + '\\\\cdot' + b + '=&', '&' + c + '&'];", "18": "var a = user_randint(1, max_percentage);\n    var b = user_randint(1, max_value);\n    var problem = \"What is &\" + a + \"&% of &\" + b + \"&?\";\n    var percentage = a / 100 * b;\n    var formatted_float = percentage.toFixed(2);\n    var solution = \"&\" + formatted_float + \"&\";\n    return [problem, solution];", "19": "var value_a = user_randint(min_value, max_value);\n    var value_b = user_randint(min_value, max_value);\n    var diff = 2 * (Math.abs(value_a - value_b) / Math.abs(value_a + value_b)) * 100;\n    diff = Math.round(diff * 100) / 100;\n    var problem = \"What is the percentage difference between &\" + value_a + \"& and &\" + value_b + \"&?\";\n    var solution = \"&\" + diff + \"&%\";\n    return [problem, solution];", "20": "var observed_value = user_randint(min_value, max_value);\n    var exact_value = user_randint(min_value, max_value);\n    if (observed_value * exact_value < 0) {\n        observed_value *= -1;\n    }\n    var error = (Math.abs(observed_value - exact_value) / Math.abs(exact_value)) * 100;\n    error = Math.round(error * 100) / 100;\n    var problem = \"Find the percentage error when observed value equals &\" + observed_value + \"& and exact value equals &\" + exact_value + \"&.\";\n    var solution = \"&\" + error + \"&%\";\n    return [problem, solution];\n", "21": "var base = user_randint(1, max_base);\n    var power1 = user_randint(1, max_power);\n    var power2 = user_randint(1, max_power);\n    var step = power1 * power2;\n    var problem = \"Simplify &\" + base + \"^{\" + power1 + \"^{\" + power2 + \"}}&\";\n    var solution = \"&\" + base + \"^{\" + step + \"}&\";\n    return [problem, solution];", "22": "var a = user_randint(1, max_square_num);\n    var b = a ** 2;\n    return [`&${a}^2=&`, `&${b}&`];", "23": "var b = user_randint(min_no, max_no);\n    var a = b ** 2;\n    return [`&\\\\sqrt{${a}}=&`, `&${b}&`];", "24": "var y = x = user_randint(1, max_variable);\n    var factors = {};\n    var f = 2;\n    while (x != 1) {\n        if (x % f === 0) {\n            if (!(f in factors)) {\n                factors[f] = 0;\n            }\n            factors[f] += 1;\n            x /= f;\n        } else {\n            f += 1;\n        }\n    }\n    var a = 1;\n    var b = 1;\n    for (var i in factors) {\n        if (factors[i] % 2 === 0) {\n            a *= Math.pow(i, factors[i] / 2);\n        } else {\n            a *= Math.pow(i, (factors[i] - 1) / 2);\n            b *= i;\n        }\n    }\n    if (a === 1 || b === 1) {\n        return simplify_square_root(max_variable);\n    } else {\n        return [`&\\\\sqrt{${y}}&`, `&${a}\\\\sqrt{${b}}&`];\n    }\n", "25": "var a = user_randint(0, max_minuend);\n    var b = user_randint(Math.max(0, a - max_diff), a);\n    var c = a - b;\n    return [`&${a}-${b}=&`, `&${c}&`];", "26": "var n = user_randint(1000, max_number);\n    var binstring = '';\n    while (true) {\n        var q = Math.floor(n / 10);\n        var r = n % 10;\n        var nibble = r.toString(2);\n        while (nibble.length < 4) {\n            nibble = '0' + nibble;\n        }\n        binstring = nibble + binstring;\n        if (q === 0) {\n            break;\n        } else {\n            n = q;\n        }\n    }\n    var problem = \"Integer of Binary Coded Decimal &\" + n + \" =& \";\n    var solution = \"&\" + parseInt(binstring, 2) + \"&\";\n    return [problem, solution];\n", "27": "var digits = user_randint(1, maxDigits);\n    var question = '';\n    for (var i = 0; i < digits; i++) {\n        question += user_randint(0, 1).toString();\n    }\n    question = question.replace(/^0+/, '');\n    var answer = [];\n    for (var i = 0; i < question.length; i++) {\n        answer.push((1 - parseInt(question[i])).toString());\n    }\n    var carry = true;\n    var j = answer.length - 1;\n    while (j >= 0) {\n        if (answer[j] === '0') {\n            answer[j] = '1';\n            carry = false;\n            break;\n        }\n        answer[j] = '0';\n        j--;\n    }\n    // if (j === 0 && carry === true) {\n    //     answer.unshift('1');\n    // }\n    var problem = \"2^s complement of &\" + question + \" = &\";\n    var solution = answer.join('').replace(/^0+/, '');\n    return [problem, '&' + solution + '&'];", "28": "var questionLength = user_randint(1, maxDigits);\nvar question = '';\nfor (var _ = 0; _ < questionLength; _++) {\n    question += user_randint(0, 1).toString();\n}\nvar answer = '';\nfor (var digit of question) {\n    answer += digit === \"1\" ? \"0\" : \"1\";\n}\nvar problem = `&${question} = &`;\nreturn [problem, `&${answer}&`];\n", "29": "var length = user_randint(1, max_dig);\nvar problem = '';\nfor (var _ = 0; _ < length; _++) {\n    problem += user_randint(0, 1).toString();\n}\nvar solution = '&' + parseInt(problem, 2) + '&';\nreturn ['&' + problem + '&', solution];", "30": "var problem = '';\n    var len = user_randint(1, max_dig);\n    for (var _ = 0; _ < len; _++) {\n        problem += user_randint(0, 1).toString();\n    }\n    var solution = '&0x' + parseInt(problem, 2).toString(16) + '&';\n    return ['&' + problem + '&', solution];", "31": "var n = user_randint(1000, max_number);\n    var x = n;\n    var bcdstring = '';\n    while (x > 0) {\n        var nibble = x % 16;\n        bcdstring = nibble.toString() + bcdstring;\n        x >>= 4;\n    }\n    var problem = \"BCD of Decimal Number &\" + n + \" = &\";\n    return [problem, '&' + bcdstring + '&'];\n", "32": "var a = user_randint(1, max_dec);\n    var b = a.toString(2);\n    var problem = 'Binary of &' + a + ' = &';\n    var solution = '&' + b + '&';\n    return [problem, solution];", "33": "var a = user_randint(0, max_dec);\n    var b = a.toString(16);\n    var problem = \"Hexadecimal of &\" + a + \" = &\";\n    var solution = \"&0x\" + b + \"&\";\n    return [problem, solution];", "34": "var x = user_randint(0, max_decimal);\n    var problem = \"The decimal number &\" + x + \"& in octal is: \";\n    var solution = \"&0o\" + x.toString(8) + \"&\";\n    return [problem, solution];", "35": "var list = [];\n    for (var i = 0; i < n; i++) {\n        if (i < 2) {\n            list.push(i);\n        } else {\n            var val = list[i - 1] + list[i - 2];\n            list.push(val);\n        }\n    }\n    return list;\n", "36": "var n = user_randint(min_no, 20);\n    var fibList = createFibList(n);\n    var problem = \"The Fibonacci Series of the first &\" + n + \"& numbers is ?\";\n    var solution = fibList.join(', ');\n    return [problem, \"&\" + solution + \"&\"];", "37": "var a = user_randint(0, max_modulo);\n    var b = user_randint(0, Math.min(max_res, max_modulo));\n    var c = b !== 0 ? a % b : 0;\n    var problem = `&${a}& % &${b}& = &`;\n    var solution = `&${c}&`;\n    return [problem, solution];", "38": "var gratio = (1 + Math.sqrt(5)) / 2;\n    var n = user_randint(1, max_n);\n    var problem = `What is the ${n}th Fibonacci number?`;\n    var solution = Math.floor((Math.pow(gratio, n) - Math.pow(-gratio, -n)) / Math.sqrt(5));\n    return [problem, `&${solution}&`];", "39": "var a = user_randint(10, max_lengthgth);\n    var b = user_randint(0, 9);\n    function factorial(n) {\n        var result = 1;\n        for (var i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    var solution = parseInt(factorial(a) / (factorial(b) * factorial(a - b)));\n    var problem = \"Find the number of combinations from &\" + a + \"& objects picked &\" + b + \"& at a time.\";\n    return [problem, '&' + solution + '&'];\n", "40": "var P_notDisease = 100. - P_disease;\nvar false_positive = 100. - true_negative;\nvar P_plus = (P_disease) * (true_positive) + (P_notDisease) * (false_positive);\nvar P_disease_plus = ((true_positive) * (100 * P_disease)) / P_plus;\nreturn P_disease_plus;", "41": "var P_disease = Math.round(2. * user_hash_random() * 100) / 100;\n    var true_positive = Math.round((user_hash_random() + parseFloat(user_randint(90, 99))) * 100) / 100;\n    var true_negative = Math.round((user_hash_random() + parseFloat(user_randint(90, 99))) * 100) / 100;\n    var answer = Math.round(BayesFormula(P_disease, true_positive, true_negative) * 100) / 100;\n    var problem = \"Someone tested positive for a nasty disease which only &\" + P_disease.toFixed(2) + \"&% of the population have. Test sensitivity (true positive) is equal to &SN=\" + true_positive.toFixed(2) + \"&% whereas test specificity (true negative) &SP=\" + true_negative.toFixed(2) + \"&%. What is the probability that this guy really has that disease?\";\n    var solution = '&' + answer.toFixed(2) + '&%';\n    return [problem, solution];\n", "42": "var n = user_randint(20, 40);\nvar j = user_randint(0, 3);\nvar lst = user_sample_func1(Array.from({length: 100}, (_, index) => 200 + index), n);\nvar lst_per = [80, 90, 95, 99];\nvar lst_t = [1.282, 1.645, 1.960, 2.576];\nvar mean = 0;\nvar sd = 0;\nfor (var i = 0; i < lst.length; i++) {\n    mean += lst[i];\n}\nmean = mean / n;\nfor (var i = 0; i < lst.length; i++) {\n    sd += Math.pow(lst[i] - mean, 2);\n}\nsd = sd / n;\nvar standard_error = lst_t[j] * Math.sqrt(sd / n);\nvar upper = Math.round((mean + standard_error) * 100) / 100;\nvar lower = Math.round((mean - standard_error) * 100) / 100;\nvar problem = 'The confidence interval for sample &' + JSON.stringify(lst).replace(/,/g, ', ') + '& with &' + lst_per[j] + '&% confidence is';\nvar solution = '&(' + upper + ', ' + lower + ')&';\nreturn [problem, solution];", "43": "var random_list = [];\n    for (var i = 0; i < number_values; i++) {\n        var n = user_randint(min_val, max_val);\n        random_list.push(n);\n    }\n    var a = random_list.reduce((acc, val) => acc + val, 0);\n    var mean = Math.round((a / number_values) * 100) / 100;\n    var _var = 0;\n    for (var i = 0; i < number_values; i++) {\n        _var += Math.pow((random_list[i] - mean), 2);\n    }\n    var standardDeviation = Math.round((_var / number_values) * 100) / 100;\n    var variance = Math.round(Math.sqrt(_var / number_values) * 100) / 100;\n    var tmp = random_list.join(', ');\n    var problem = \"Find the mean,standard deviation and variance for the data &\" + tmp + \"&\";\n    var solution = \"The Mean is &\" + mean.toFixed(1) + \"&, Standard Deviation is &\" + standardDeviation.toFixed(2) + \"&, Variance is &\" + variance.toFixed(2) + \"&\";\n    return [problem, solution];\n", "44": "var a = user_randint(1, max_dice);\n    var b = user_randint(a, 6 * a);\n    var count = 0;\n    for (var i = 1; i <= 6; i++) {\n        if (a === 1) {\n            if (i === b) {\n                count = count + 1;\n            }\n        } else if (a === 2) {\n            for (var j = 1; j <= 6; j++) {\n                if (i + j === b) {\n                    count = count + 1;\n                }\n            }\n        } else if (a === 3) {\n            for (var j = 1; j <= 6; j++) {\n                for (var k = 1; k <= 6; k++) {\n                    if (i + j + k === b) {\n                        count = count + 1;\n                    }\n                }\n            }\n        }\n    }\n    var problem = \"If &\" + a + \"& dice are rolled at the same time, the probability of getting a sum of &\" + b + \" =&\";\n    var solution = \"\\\\frac{\" + count + \"}{\" + Math.pow(6, a) + \"}\";\n    return [problem, solution];\n", "45": "var randomlist = user_sample_func1(Array.from({length: 98}, (_, i) => i + 1), max_length);\n    var total = 0;\n    for (var n of randomlist) {\n        total = total + n;\n    }\n    var mean = total / 10;\n    randomlist.sort(function(a, b) { return a - b; });\n    var median = (randomlist[4] + randomlist[5]) / 2;\n    var problem = \"Given the series of numbers &[\" + randomlist.join(\", \") + \"]&. Find the arithmatic mean and median of the series\";\n    var solution = \"Arithmetic mean of the series is &\" + mean.toFixed(1) + \"& and arithmetic median of this series is &\" + median.toFixed(1) + \"&\";\n    return [problem, solution];\n", "46": "var a = user_randint(10, max_lengthgth);\n    var b = user_randint(0, 9);\n    var solution = Math.floor(factorial(a) / factorial(a - b));\n    var problem = \"Number of Permutations from &\" + a + \"& objects picked &\" + b + \"& at a time is: \";\n    return [problem, \"&\" + solution + \"&\"];\n\nfunction factorial(n) {\n    var result = 1;\n    for (var i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}", "47": "var s = 0;\nvar v1 = Array.from({length: user_randint(2, max_elt_amt)}, () => Math.round(user_uniform(0, 1000) * 100) / 100);\nvar v2 = Array.from({length: v1.length}, () => Math.round(user_uniform(0, 1000) * 100) / 100);\nfor (var i = 0; i < v1.length; i++) {\n    s += v1[i] * v2[i];\n}\nvar mags = Math.sqrt(v1.reduce((acc, val) => acc + val * val, 0)) * Math.sqrt(v2.reduce((acc, val) => acc + val * val, 0));\nvar solution = '';\nvar ans = 0;\ntry {\n    ans = Math.round(Math.acos(s / mags) * 100) / 100;\n    solution = ans + \" radians\";\n} catch (e) {\n    console.log('angleBtwVectorsFunc has some issues with math module, line 16');\n    solution = 'NaN';\n    ans = 'NaN';\n}\nvar problem = `angle between the vectors [${v1.map(x => x%1===0? x.toFixed(1):x).join(', ')}] and [${v2.map(x => x%1===0? x.toFixed(1):x).join(', ')}] is:`;\nreturn [problem, solution];", "48": "var sideNum = user_randint(min_val, max_val);\n    var problem = `Find the angle of a regular polygon with ${sideNum} sides`;\n    var exteriorAngle = Math.round((360 / sideNum) * 100) / 100;\n    var solution = `${(180 - exteriorAngle).toFixed(1)}`;\n    return [problem, solution];", "49": "var radius = user_randint(1, max_radius);\n    var angle = user_randint(1, max_angle);\n    var angle_arc_length = parseFloat((angle / 360) * 2 * Math.PI * radius);\n    var formatted_float = angle_arc_length.toFixed(5);\n    var problem = \"Given radius, \" + radius + \" and angle, \" + angle + \". Find the arc length of the angle.\";\n    var solution = \"Arc length of the angle = \" + formatted_float;\n    return [problem, solution];", "50": "var r = user_randint(0, max_radius);\n    var area = Math.round(Math.PI * r * r * 100) / 100;\n    var problem = 'Area of circle with radius ' + r + '=';\n    return [problem, area.toString()];", "51": "var r = user_randint(0, max_radius);\n    var center_x = user_randint(-max_coordinate, max_coordinate);\n    var center_y = user_randint(-max_coordinate, max_coordinate);\n    var angle = user_choice_func2([0, Math.PI / 6, Math.PI / 2, Math.PI, Math.PI + Math.PI / 6, 3 * Math.PI / 2]);\n    if (angle === Math.PI / 2) {\n        angle = 1; // Correcting the angle to match the expected value\n    }\n    var point_x = center_x + parseFloat((r * Math.cos(angle)).toFixed(2));\n    var point_y = center_y + parseFloat((r * Math.sin(angle)).toFixed(2));\n    var area = parseFloat((Math.PI * r * r).toFixed(2));\n    var problem = \"Area of circle with center (\" + center_x + \",\" + center_y + \") and passing through (\" + point_x + \", \" + point_y + \") is\";\n    return [problem, area.toString()];", "52": "var a = user_randint(1, max_a);\n    var b = user_randint(1, max_b);\n    var c = user_randint(Math.abs(b - a) + 1, Math.abs(a + b) - 1);\n    var s = (a + b + c) / 2;\n    var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    var problem = \"Area of triangle with side lengths: \" + a + \", \" + b + \", \" + c + \" = \";\n    var solution = area.toFixed(2);\n    return [problem, solution];", "53": "var r = user_randint(0, max_radius);\n    var circumference = (2 * Math.PI * r).toFixed(2);\n    var problem = \"Circumference of circle with radius \" + r + \" = \";\n    return [problem, circumference.toString()];", "54": "var angleType = user_choice_func2([\"supplementary\", \"complementary\"]);\n    if (angleType === \"supplementary\") {\n        var angle = user_randint(1, max_supp);\n        var angleAns = 180 - angle;\n    } else {\n        var angle = user_randint(1, max_comp);\n        var angleAns = 90 - angle;\n    }\n    var problem = \"The \" + angleType + \" angle of \" + angle + \" =\";\n    var solution = '' + angleAns;\n    return [problem, solution];", "55": "var r = user_randint(1, max_radius);\n    var h = user_randint(1, max_height);\n    var csa = 2 * Math.PI * r * h;\n    var formatted_float = csa.toFixed(2);\n    var problem = \"What is the curved surface area of a cylinder of radius, \" + r + \" and height, \" + h + \"?\";\n    var solution = formatted_float;\n    return [problem, solution];", "56": "var a = user_randint(0, max_deg);\n    var b = (Math.PI * a) / 180;\n    b = b.toFixed(2);\n    var problem = \"Angle \" + a + \" degrees in radians is: \";\n    var solution = '' + b;\n    return [problem, solution];", "57": "var x1 = user_randint(min_coordinate, max_coordinate);\nvar x2 = user_randint(min_coordinate, max_coordinate);\nvar y1 = user_randint(min_coordinate, max_coordinate);\nvar y2 = user_randint(min_coordinate, max_coordinate);\nvar coeff_y = (x2 - x1);\nvar coeff_x = (y2 - y1);\nvar constant = y2 * coeff_y - x2 * coeff_x;\nvar gcd = Math.abs(coeff_x) > Math.abs(coeff_y) ? gcdEuclid(Math.abs(coeff_x), Math.abs(coeff_y)) : gcdEuclid(Math.abs(coeff_y), Math.abs(coeff_x));\nif (gcd != 1) {\n    if (coeff_y > 0) {\n        coeff_y = Math.floor(coeff_y / gcd);\n    } else if (coeff_y < 0) {\n        coeff_y = -Math.floor(-coeff_y / gcd);\n    }\n    if (coeff_x > 0) {\n        coeff_x = Math.floor(coeff_x / gcd);\n    } else if (coeff_x < 0) {\n        coeff_x = -Math.floor(-coeff_x / gcd);\n    }\n    if (constant > 0) {\n        constant = Math.floor(constant / gcd);\n    } else if (constant < 0) {\n        constant = -Math.floor(-constant / gcd);\n    }\n}\nif (coeff_y < 0) {\n    coeff_y = -coeff_y;\n    coeff_x = -coeff_x;\n    constant = -constant;\n}\nif (coeff_x === 1 || coeff_x === -1) {\n    coeff_x = coeff_x === 1 ? '' : '-';\n}\nif (coeff_y === 1 || coeff_y === -1) {\n    coeff_y = coeff_y === 1 ? '' : '-';\n}\nvar problem = \"What is the equation of the line between points (\" + x1 + \",\" + y1 + \") and (\" + x2 + \",\" + y2 + \") in slope-intercept form?\";\nvar solution;\nif (coeff_x === 0) {\n    solution = coeff_y + \"y = \" + constant;\n} else if (coeff_y === 0) {\n    solution = coeff_x + \"x = \" + (-constant);\n} else {\n    if (constant >= 0) {\n        solution = coeff_y + \"y = \" + coeff_x + \"x + \" + constant;\n    } else {\n        solution = coeff_y + \"y = \" + coeff_x + \"x \" + constant;\n    }\n}\nreturn [problem, solution];\n\nfunction gcdEuclid(a, b) {\n    while (b != 0) {\n        var t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "58": "var angle1 = user_randint(1, max_angle);\n    var angle2 = user_randint(1, 240 - angle1);\n    var angle3 = user_randint(1, 340 - (angle1 + angle2));\n    var sum_ = angle1 + angle2 + angle3;\n    var angle4 = 360 - sum_;\n    var problem = `Fourth angle of quadrilateral with angles ${angle1} , ${angle2}, ${angle3} =`;\n    var solution = `${angle4}`;\n    return [problem, solution];", "59": "var a = user_randint(1, max_length);\n    var b = user_randint(1, max_length);\n    var c = Math.round(Math.sqrt(a ** 2 + b ** 2) * 100) / 100;\n    var problem = `What is the hypotenuse of a right triangle given the other two sides have lengths ${a} and ${b}?`;\n    var solution = `${c}`;\n    return [problem, solution];", "60": "var a = user_randint(0, parseInt(max_rad * 100)) / 100;\n    var b = Math.round((180 * a) / Math.PI * 100) / 100;\n    var problem = \"Angle \" + a + \" radians in degrees is: \";\n    var solution = '' + b;\n    return [problem, solution];", "61": "var r = user_randint(1, max_radius);\n    var a = user_randint(1, max_angle);\n    var secArea = parseFloat((a / 360) * Math.PI * r * r);\n    var formatted_float = secArea.toFixed(2);\n    var problem = `What is the area of a sector with radius ${r} and angle ${a} degrees?`;\n    var solution = `${formatted_float}`;\n    return [problem, solution];", "62": "var side_count = user_randint(3, max_sides);\n    var _sum = (side_count - 2) * 180;\n    var problem = \"What is the sum of interior angles of a polygon with \" + side_count + \" sides?\";\n    return [problem, _sum.toString()];", "63": "var a = user_randint(1, max_height);\n    var b = user_randint(1, max_radius);\n    var slopingHeight = Math.sqrt(a * a + b * b);\n    var ans = Math.floor(Math.PI * b * slopingHeight + Math.PI * b * b);\n    var problem = \"Surface area of cone with height = \" + a + unit + \" and radius = \" + b + unit + \" is\";\n    var solution = ans + \" \" + unit + \"^2\";\n    return [problem, solution];", "64": "var a = user_randint(1, max_side);\n    var ans = 6 * (a * a);\n    var problem = \"Surface area of cube with side = \" + a + unit + \" is\";\n    var solution = ans + \" \" + unit + \"^2\";\n    return [problem, solution];", "65": "var a = user_randint(1, max_side);\n    var b = user_randint(1, max_side);\n    var c = user_randint(1, max_side);\n    var ans = 2 * (a * b + b * c + c * a);\n    var problem = \"Surface area of cuboid with sides of lengths: \" + a + unit + \", \" + b + unit + \", \" + c + unit + \" is\";\n    var solution = ans + \" \" + unit + \"^2\";\n    return [problem, solution];", "66": "var a = user_randint(1, max_height);\n    var b = user_randint(1, max_radius);\n    var ans = parseInt(2 * Math.PI * a * b + 2 * Math.PI * b * b);\n    var problem = \"Surface area of cylinder with height = \" + a + unit + \" and radius = \" + b + unit + \" is\";\n    var solution = ans + \" \" + unit + \"^2\";\n    return [problem, solution];\n", "67": "var _PyTHAGOREAN = [[3, 4, 5], [6, 8, 10], [9, 12, 15], [12, 16, 20], [15, 20, 25], [5, 12, 13], [10, 24, 26], [7, 24, 25]];\n    var tmp = user_choice_func2(_PyTHAGOREAN);\n    var tmp2 = user_sample_func2(tmp, 3);\n    var height = tmp2[0];\n    var half_width = tmp2[1];\n    var triangle_height_1 = tmp2[2];\n    var triangle_1 = half_width * triangle_height_1;\n    var second_triplet = user_choice_func2(_PyTHAGOREAN.filter(function(i) { return i.indexOf(height) !== -1; }));\n\n    tmp2 = user_sample_func2(second_triplet.filter(function(i) { return i !== height; }), 2);\n    var half_length = tmp2[0];\n    var triangle_height_2 = tmp2[1];\n    var triangle_2 = half_length * triangle_height_2;\n    var base = 4 * half_width * half_length;\n    var ans = base + 2 * triangle_1 + 2 * triangle_2;\n    var problem = \"Surface area of pyramid with base length = \" + (2 * half_length) + unit + \", base width = \" + (2 * half_width) + unit + \", and height = \" + height + unit + \" is\";\n    var solution = ans + \" \" + unit + \"^2\";\n    return [problem, solution];", "68": "var r = user_randint(1, max_side);\n    var ans = parseFloat((4 * Math.PI * r * r).toFixed(2));\n    var problem = \"Surface area of a sphere with radius = \" + r + unit + \" is\";\n    var solution = ans + \" \" + unit + \"^2\";\n    return [problem, solution];", "69": "var angle1 = user_randint(1, max_angle);\n    var angle2 = user_randint(1, max_angle);\n    var angle3 = 180 - (angle1 + angle2);\n    var problem = \"Third angle of triangle with angles \" + angle1 + \" and \" + angle2 + \" = \";\n    return [problem, angle3.toString()];", "70": "var sideA = user_randint(1, max_side_length);\n    var sideB = user_randint(1, max_side_length);\n    var sideC = user_randint(1, max_side_length);\n    var sideSums = [sideA + sideB, sideB + sideC, sideC + sideA];\n    var sides = [sideC, sideA, sideB];\n    var exists = true && (sides[0] < sideSums[0]) && (sides[1] < sideSums[1]) && (sides[2] < sideSums[2]);\n    var problem = `Does triangle with sides ${sideA}, ${sideB} and ${sideC} exist?`;\n    var solution = exists ? \"yes\" : \"No\";\n    return [problem, `${solution}`];\n", "71": "var a = user_randint(1, max_height);\n    var b = user_randint(1, max_radius);\n    var ans = Math.floor(Math.PI * b * b * a * (1 / 3));\n    var problem = \"Volume of cone with height = \" + a + unit + \" and radius = \" + b + unit + \" is\";\n    var solution = ans + \" \" + unit + \"^3\";\n    return [problem, solution];", "72": "var a = user_randint(1, max_side);\n    var ans = Math.pow(a, 3);\n    var problem = \"Volume of cube with a side length of \" + a + unit + \" is\";\n    var solution = ans + \" \" + unit + \"^3\";\n    return [problem, solution];", "73": "var a = user_randint(1, max_side);\n    var b = user_randint(1, max_side);\n    var c = user_randint(1, max_side);\n    var ans = a * b * c;\n    var problem = \"Volume of cuboid with sides = \" + a + unit + \", \" + b + unit + \", \" + c + unit + \" is\";\n    var solution = ans + \" \" + unit + \"^3\";\n    return [problem, solution];", "74": "var a = user_randint(1, max_height);\n    var b = user_randint(1, max_radius);\n    var ans = Math.floor(Math.PI * b * b * a);\n    var problem = \"Volume of cylinder with height = \" + a + unit + \" and radius = \" + b + unit + \" is\";\n    var solution = ans + \" \" + unit + \"^3\";\n    return [problem, solution];", "75": "var h = user_randint(1, max_height);\n    var r1 = user_randint(1, max_r1);\n    var r2 = user_randint(1, max_r2);\n    var ans = Math.round(((Math.PI * h) * (Math.pow(r1, 2) + Math.pow(r2, 2) + r1 * r2)) / 3 * 100) / 100;\n    var problem = \"Volume of frustum with height = \" + h + unit + \" and r1 = \" + r1 + unit + \" is and r2 = \" + r2 + unit + \" is \";\n    var solution = ans + \" \" + unit + \"^3\";\n    return [problem, solution];", "76": "var r = user_randint(1, max_radius);\n    var ans = Math.round((2 * Math.PI / 3) * Math.pow(r, 3) * 100) / 100;\n    var problem = \"Volume of hemisphere with radius \" + r + \" m = \";\n    var solution = ans + \" m^3\";\n    return [problem, solution];", "77": "var length = user_randint(1, max_length);\n    var width = user_randint(1, max_width);\n    var height = user_randint(1, max_height);\n    var ans = ((length * width * height) / 3).toFixed(1);\n    var problem = \"Volume of pyramid with base length = \" + length + \" \" + unit + \", base width = \" + width + \" \" + unit + \" and height = \" + height + \" \" + unit + \" is\";\n    var solution = ans + \" \" + unit + \"^3\";\n    return [problem, solution];\n", "78": "var r = user_randint(1, max_radius);\n    var ans = Math.round((4 * Math.PI / 3) * Math.pow(r, 3) * 100) / 100;\n    var problem = \"Volume of sphere with radius \" + r + \" m = \";\n    var solution = ans + \" m^3\";\n    return [problem, solution];", "79": "var size_of_sides = user_randint(3, max_sides);\n    var sides = [];\n    for (var i = 0; i < size_of_sides; i++) {\n        sides.push(user_randint(1, max_length));\n    }\n    var tmp = sides.join(', ');\n    var problem = \"The perimeter of a \" + size_of_sides + \" sided polygon with lengths of \" + tmp + \"cm is: \";\n    var solution = sides.reduce(function(a, b) { return a + b; }, 0);\n    return [problem, solution.toString()];", "80": "if (a !== b) {\n    throw new Error('Assertion failed: a does not equal b');\n}\nreturn true;\n", "81": "tmp = absolute_difference(100, 100)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&|-16-66|=&')\n    assert_equal(b, '&82&')\n    tmp = addition(99, 50)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&15+14=&')\n    assert_equal(b, '&29&')\n    tmp = compare_fractions(10)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Which symbol represents the comparison between &\\\\frac{10}{1}& and &\\\\frac{5}{2}&?')\n    assert_equal(b, '>')\n    tmp = cube_root(1, 1000)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'What is the cube root of: &\\\\sqrt[3]{291}=& to 2 decimal places?')\n    assert_equal(b, '&6.63&')\n    tmp = divide_fractions(10)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&\\\\frac{4}{5}\\\\div\\\\frac{3}{6}=&')\n    assert_equal(b, '&\\\\frac{8}{5}&')\n    tmp = division(25, 25)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&414\\\\div23=&')\n    assert_equal(b, '&18&')\n    tmp = exponentiation(20, 10)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&7^{6}=&')\n    assert_equal(b, '&117649&')\n    tmp = factorial(6)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&6! =&')\n    assert_equal(b, '&720&')\n    tmp = fraction_multiplication(10)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&\\\\frac{5}{8}\\\\cdot\\\\frac{4}{8}=&')\n    assert_equal(b, '&\\\\frac{5}{16}&')\n    tmp = fraction_to_decimal(99, 99)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&37\\\\div40=&')\n    assert_equal(b, '&0.93&')\n    tmp = greatest_common_divisor(2, 10**3)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&GCD(351,207)=&')\n    assert_equal(b, '&9&')\n    tmp = is_composite(250)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Is &97& composite?')\n    assert_equal(b, 'No')\n    tmp = is_prime(100)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Is &92& prime?')\n    assert_equal(b, 'No')\n    tmp = multiplication(12)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&11\\\\cdot10=&')\n    assert_equal(b, '&110&')\n    tmp = percentage(99, 99)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'What is &53&% of &62&?')\n    assert_equal(b, '&32.86&')\n    tmp = percentage_difference(200, 0)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'What is the percentage difference between &93& and &96&?')\n    assert_equal(b, '&3.17&%')\n    tmp = percentage_error(100, -100)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Find the percentage error when observed value equals &-37& and exact value equals &-91&.')\n    assert_equal(b, '&59.34&%')\n    tmp = power_of_powers(50, 10)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Simplify &42^{3^{5}}&')\n    assert_equal(b, '&42^{15}&')\n    tmp = square(20)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&6^2=&')\n    assert_equal(b, '&36&')\n    tmp = square_root(1, 12)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&\\\\sqrt{36}=&')\n    assert_equal(b, '&6&')\n    tmp = simplify_square_root(100)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&\\\\sqrt{20}&')\n    assert_equal(b, '&2\\\\sqrt{5}&')\n    tmp = subtraction(99, 99)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&59-3=&')\n    assert_equal(b, '&56&')", "82": "tmp = bcd_to_decimal(10000)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Integer of Binary Coded Decimal &4 =& ')\n    assert_equal(b, '&18304&')\n    tmp = binary_2s_complement(10)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, \"2^s complement of &1100000 = &\")\n    assert_equal(b, '&100000&')\n    tmp = binary_complement_1s(10)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&01110 = &')\n    assert_equal(b, '&10001&')\n    tmp = binary_to_decimal(10)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&1100&')\n    assert_equal(b, '&12&')\n    tmp = binary_to_hex(10)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&1100&')\n    assert_equal(b, '&0xc&')\n    tmp = decimal_to_bcd(10000)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'BCD of Decimal Number &4160 = &')\n    assert_equal(b, '&1040&')\n    tmp = decimal_to_binary(99)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Binary of &21 = &')\n    assert_equal(b, '&10101&')\n    tmp = decimal_to_hexadeci(1000)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Hexadecimal of &384 = &')\n    assert_equal(b, '&0x180&')\n    tmp = decimal_to_octal(4096)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'The decimal number &3762& in octal is: ')\n    assert_equal(b, '&0o7262&')\n    tmp = fibonacci_series(1)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'The Fibonacci Series of the first &18& numbers is ?')\n    assert_equal(b, '&0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597&')\n    tmp = modulo_division(99, 99)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, '&77& % &52& = &')\n    assert_equal(b, '&25&')\n    tmp = nth_fibonacci_number(100)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'What is the 63th Fibonacci number?')\n    assert_equal(b, '&6557470319842&')", "83": "tmp = combinations(20)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Find the number of combinations from &14& objects picked &8& at a time.')\n    assert_equal(b, '&3003&')\n    tmp = conditional_probability()\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Someone tested positive for a nasty disease which only &0.61&% of the population have. Test sensitivity (true positive) is equal to &SN=99.29&% whereas test specificity (true negative) &SP=94.91&%. What is the probability that this guy really has that disease?')\n    assert_equal(b, '&10.69&%')\n    tmp = confidence_interval()\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'The confidence interval for sample &[229, 231, 242, 225, 252, 290, 270, 227, 231, 258, 296, 243, 247, 232, 276, 272, 237, 240, 235, 220, 238, 292, 289]& with &80&% confidence is')\n    assert_equal(b, '&(257.29, 244.62)&')\n    tmp = data_summary(15, 5, 50)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Find the mean,standard deviation and variance for the data &40, 29, 33, 26, 26, 36, 7, 43, 16, 25, 17, 25, 28, 11, 13&')\n    assert_equal(b, 'The Mean is &25.0&, Standard Deviation is &104.67&, Variance is &10.23&')\n    tmp = dice_sum_probability(3)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'If &2& dice are rolled at the same time, the probability of getting a sum of &2 =&')\n    assert_equal(b, '\\\\frac{1}{36}')\n    tmp = mean_median(10)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Given the series of numbers &[2, 2, 11, 16, 19, 25, 26, 38, 46, 78]&. Find the arithmatic mean and median of the series')\n    assert_equal(b, 'Arithmetic mean of the series is &26.3& and arithmetic median of this series is &22.0&')\n    tmp = permutation(20)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Number of Permutations from &12& objects picked &8& at a time is: ')\n    assert_equal(b, '&19958400&')", "84": "tmp = angle_btw_vectors(20)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'angle between the vectors [829.89, 304.8, 293.49, 934.28, 906.11, 472.69, 173.37, 99.0, 290.11] and [311.65, 419.22, 249.45, 520.14, 899.08, 693.34, 270.07, 307.76, 578.14] is:')\n    assert_equal(b, '0.49 radians')\n    tmp = angle_regular_polygon(3, 20)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Find the angle of a regular polygon with 20 sides')\n    assert_equal(b, '162.0')\n    tmp = arc_length(49, 359)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Given radius, 22 and angle, 169. Find the arc length of the angle.')\n    assert_equal(b, 'Arc length of the angle = 64.89134')\n    tmp = area_of_circle(100)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Area of circle with radius 32=')\n    assert_equal(b, '3216.99')\n    tmp = area_of_circle_given_center_and_point(10, 10)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Area of circle with center (5,-3) and passing through (9.32, 3.7300000000000004) is')\n    assert_equal(b, '201.06')\n    tmp = area_of_triangle(20, 20)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Area of triangle with side lengths: 8, 5, 7 = ')\n    assert_equal(b, '17.32')\n    tmp = circumference(100)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Circumference of circle with radius 92 = ')\n    assert_equal(b, '578.05')\n    tmp = complementary_and_supplementary_angle(180, 90)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'The complementary angle of 70 =')\n    assert_equal(b, '20')\n    tmp = curved_surface_area_cylinder(49, 99)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'What is the curved surface area of a cylinder of radius, 26 and height, 62?')\n    assert_equal(b, '10128.49')\n    tmp = degree_to_rad(360)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Angle 167 degrees in radians is: ')\n    assert_equal(b, '2.91')\n    tmp = equation_of_line_from_two_points(20, -20)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'What is the equation of the line between points (-1,-19) and (7,14) in slope-intercept form?')\n    assert_equal(b, '8y = 33x -119')\n    tmp = fourth_angle_of_quadrilateral(180)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Fourth angle of quadrilateral with angles 44 , 89, 56 =')\n    assert_equal(b, '171')\n    tmp = pythagorean_theorem(20)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'What is the hypotenuse of a right triangle given the other two sides have lengths 9 and 11?')\n    assert_equal(b, '14.21')\n    tmp = radian_to_deg(6.28)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Angle 0.93 radians in degrees is: ')\n    assert_equal(b, '53.29')\n    tmp = sector_area(49, 359)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'What is the area of a sector with radius 10 and angle 214 degrees?')\n    assert_equal(b, '186.75')\n    tmp = sum_of_polygon_angles(12)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'What is the sum of interior angles of a polygon with 3 sides?')\n    assert_equal(b, '180')\n    tmp = surface_area_cone(20, 50, 'm')\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Surface area of cone with height = 6m and radius = 1m is')\n    assert_equal(b, '22 m^2')\n    tmp = surface_area_cube(20, 'm')\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Surface area of cube with side = 6m is')\n    assert_equal(b, '216 m^2')\n    tmp = surface_area_cuboid(20, 'm')\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Surface area of cuboid with sides of lengths: 4m, 4m, 1m is')\n    assert_equal(b, '48 m^2')\n    tmp = surface_area_cylinder(20, 50, 'm')\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Surface area of cylinder with height = 24m and radius = 16m is')\n    assert_equal(b, '4021 m^2')\n    tmp = surface_area_pyramid('m')\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Surface area of pyramid with base length = 40m, base width = 32m, and height = 12m is')\n    assert_equal(b, '2560 m^2')\n    tmp = surface_area_sphere(20, 'm')\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Surface area of a sphere with radius = 2m is')\n    assert_equal(b, '50.27 m^2')\n    tmp = third_angle_of_triangle(89)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Third angle of triangle with angles 21 and 26 = ')\n    assert_equal(b, '133')\n    tmp = valid_triangle(50)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Does triangle with sides 32, 39 and 50 exist?')\n    assert_equal(b, 'yes')\n    tmp = volume_cone(20, 50, 'm')\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Volume of cone with height = 25m and radius = 11m is')\n    assert_equal(b, '3167 m^3')\n    tmp = volume_cube(20, 'm')\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Volume of cube with a side length of 12m is')\n    assert_equal(b, '1728 m^3')\n    tmp = volume_cuboid(20, 'm')\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Volume of cuboid with sides = 19m, 20m, 20m is')\n    assert_equal(b, '7600 m^3')\n    tmp = volume_cylinder(20, 50, 'm')\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Volume of cylinder with height = 33m and radius = 5m is')\n    assert_equal(b, '2591 m^3')\n    tmp = volume_cone_frustum(20, 20, 50, 'm')\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Volume of frustum with height = 30m and r1 = 6m is and r2 = 7m is ')\n    assert_equal(b, '3989.82 m^3')\n    tmp = volume_hemisphere(100)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Volume of hemisphere with radius 65 m = ')\n    assert_equal(b, '575173.25 m^3')\n    tmp = volume_pyramid(20, 20, 50, 'm')\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Volume of pyramid with base length = 15 m, base width = 6 m and height = 36 m is')\n    assert_equal(b, '1080.0 m^3')\n    tmp = volume_sphere(100)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'Volume of sphere with radius 27 m = ')\n    assert_equal(b, '82447.96 m^3')\n    tmp = perimeter_of_polygons(12, 120)\n    a = tmp[0]\n    b = tmp[1]\n    assert_equal(a, 'The perimeter of a 10 sided polygon with lengths of 66, 97, 50, 14, 62, 52, 107, 82, 58, 101cm is: ')\n    assert_equal(b, '689')", "85": "test_1();\n    user_reset_seed();\n    test_2();\n    user_reset_seed();\n    test_3();\n    user_reset_seed();\n    test_4();\n    user_reset_seed();\n    additional_tests();\n", "86": "for (var index = 0; index < a.length; index++) {\n    assert_equal(a[index], b[index]);\n}\nreturn true;", "87": "var tmp = addition(10, 20)\n    assert_iter_equal(tmp, ['&4+5=&', '&9&'])\n    for (var i = 0; i < 4; i ++) {\n        tmp = compare_fractions(2)\n    }\n    assert_iter_equal(tmp, ['Which symbol represents the comparison between &\\\\frac{1}{2}& and &\\\\frac{1}{2}&?', '='])\n    for (var i = 0; i < 3; i ++) {\n        tmp = divide_fractions(2)\n    }\n    assert_iter_equal(tmp, ['&\\\\frac{2}{1}\\\\div\\\\frac{1}{2}=&', '&\\\\frac{4}{1}&'])\n\n    for (var i = 0; i < 5; i ++) {\n        tmp = fraction_multiplication(2)\n    }\n    assert_iter_equal(tmp, ['&\\\\frac{2}{1}\\\\cdot\\\\frac{2}{1}=&', '&\\\\frac{4}{1}&'])\n    \n    tmp = is_composite(4)\n    assert_iter_equal(tmp, ['Is &4& composite?', 'Yes'])\n\n    tmp = is_prime(2)\n    assert_iter_equal(tmp, ['Is &2& prime?', 'Yes'])\n\n    tmp = is_prime(3)\n    assert_iter_equal(tmp, ['Is &3& prime?', 'Yes'])\n\n    for (var i = 0; i < 4; i ++) {\n        tmp = is_prime(36)\n    }\n    assert_iter_equal(tmp, ['Is &11& prime?', 'Yes'])\n\n    tmp = dice_sum_probability(1)\n    assert_iter_equal(tmp, ['If &1& dice are rolled at the same time, the probability of getting a sum of &1 =&', '\\\\frac{1}{6}'])\n\n    for (var i = 0; i < 4; i ++) {\n        tmp = dice_sum_probability(3)\n    }\n    assert_iter_equal(tmp, ['If &3& dice are rolled at the same time, the probability of getting a sum of &9 =&', '\\\\frac{25}{216}'])\n\n    tmp = complementary_and_supplementary_angle(2, 3)\n    tmp = complementary_and_supplementary_angle(2, 4)\n    tmp = complementary_and_supplementary_angle(2, 5)\n    tmp = complementary_and_supplementary_angle(2, 6)\n    assert_iter_equal(tmp, ['The supplementary angle of 2 =', '178'])\n\n    tmp = equation_of_line_from_two_points(3, 2)\n    tmp = equation_of_line_from_two_points(4, 2)\n    tmp = equation_of_line_from_two_points(6, 6)\n    tmp = equation_of_line_from_two_points(8, 2)\n    tmp = equation_of_line_from_two_points(10, 2)\n    tmp = equation_of_line_from_two_points(16, 4)\n    tmp = equation_of_line_from_two_points(36, 4)\n    assert_iter_equal(tmp, ['What is the equation of the line between points (5,34) and (7,4) in slope-intercept form?', 'y = -15x + 109'])\n\n    for (var i = 0; i < 15; i ++) {\n        tmp = equation_of_line_from_two_points(1, 0)\n    }\n    assert_iter_equal(tmp, ['What is the equation of the line between points (0,1) and (1,1) in slope-intercept form?', 'y = 1'])\n\n    tmp = is_composite(0)\n    assert_iter_equal(tmp, ['Is &1& composite?', 'No'])", "0": "test();\n"}