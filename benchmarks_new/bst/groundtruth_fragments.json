{
    "1": "class_var.label = label;\nclass_var.parent = parent;\nclass_var.left = null;\nclass_var.right = null;\nreturn null;",
    "2": "class_var.root = null;\nreturn null;",
    "3": "class_var.root = null;\nreturn null;",
    "4": "return class_var.root === null;",
    "5": "class_var.root = class_var._put(class_var.root, label, null);",
    "6": "        if (node === null) {\n            node = new Node(label, parent);\n        } else {\n            if (label < node.label) {\n                node.left = class_var._put(node.left, label, node);\n            } else if (label > node.label) {\n                node.right = class_var._put(node.right, label, node);\n            } else {\n                var msg = \"Node with label \" + label + \" already exists\";\n                throw new Exception(msg);\n            }\n        }\n        return node;",
    "7": "return class_var._search(class_var.root, label);",
    "8": "        if (node === null) {\n            var msg = \"Node with label \" + label + \" does not exist\";\n            throw new Exception(msg);\n        } else {\n            if (label < node.label) {\n                node = class_var._search(node.left, label);\n            } else if (label > node.label) {\n                node = class_var._search(node.right, label);\n            }\n        }\n        return node;",
    "9": "var node = class_var.search(label);\nif (node.right && node.left) {\n    var lowest_node = class_var._get_lowest_node(node.right);\n    lowest_node.left = node.left;\n    lowest_node.right = node.right;\n    node.left.parent = lowest_node;\n    if (node.right) {\n        node.right.parent = lowest_node;\n    }\n    class_var._reassign_nodes(node, lowest_node);\n} else if (!node.right && node.left) {\n    class_var._reassign_nodes(node, node.left);\n} else if (node.right && !node.left) {\n    class_var._reassign_nodes(node, node.right);\n} else {\n    class_var._reassign_nodes(node, null);\n}",
    "10": "if (new_children !== null) {\n    new_children.parent = node.parent;\n}\nif (node.parent !== null) {\n    if (node.parent.right === node) {\n        node.parent.right = new_children;\n    } else {\n        node.parent.left = new_children;\n    }\n} else {\n    class_var.root = new_children;\n}\nreturn null;\n",
    "11": "        if (node.left) {\n            var lowest_node = class_var._get_lowest_node(node.left);\n        } else {\n            var lowest_node = node;\n            class_var._reassign_nodes(node, node.right);\n        }\n        return lowest_node;",
    "12": "try {\n    class_var.search(label);\n    return true;\n} catch (exception) {\n    return false;\n}",
    "13": "if (class_var.root === null) {\n    throw new Exception(\"Binary search tree is empty\");\n}\nvar node = class_var.root;\nwhile (node.right !== null) {\n    node = node.right;\n}\nreturn node.label;",
    "14": "if (class_var.root === null) {\n    throw new Error(\"Binary search tree is empty\");\n}\nvar node = class_var.root;\nwhile (node.left !== null) {\n    node = node.left;\n}\nreturn node.label;\n",
    "15": "return class_var._inorder_traversal(class_var.root);",
    "16": "if (node !== null) {\n    yield* class_var._inorder_traversal(node.left);\n    yield node;\n    yield* class_var._inorder_traversal(node.right);\n}",
    "17": "return class_var._preorder_traversal(class_var.root);",
    "18": "if (node !== null) {\n    yield node;\n    yield* class_var._preorder_traversal(node.left);\n    yield* class_var._preorder_traversal(node.right);\n}",
    "19": "var t = new BinarySearchTree();\n    t.put(8);\n    t.put(3);\n    t.put(6);\n    t.put(1);\n    t.put(10);\n    t.put(14);\n    t.put(13);\n    t.put(4);\n    t.put(7);\n    t.put(5);\n    return t;\n",
    "20": "t = new BinarySearchTree();\n    if (!t.is_empty()) throw new Error('Assertion failed');\n\n    t.put(8);\n\n    if (t.root === null) throw new Error('Assertion failed');\n    if (t.root.parent !== null) throw new Error('Assertion failed');\n    if (t.root.label !== 8) throw new Error('Assertion failed');\n\n    t.put(10);\n\n    if (t.root.right === null) throw new Error('Assertion failed');\n    if (t.root.right.parent !== t.root) throw new Error('Assertion failed');\n    if (t.root.right.label !== 10) throw new Error('Assertion failed');\n\n    t.put(3);\n\n    if (t.root.left === null) throw new Error('Assertion failed');\n    if (t.root.left.parent !== t.root) throw new Error('Assertion failed');\n    if (t.root.left.label !== 3) throw new Error('Assertion failed');\n\n    t.put(6);\n\n    if (t.root.left.right === null) throw new Error('Assertion failed');\n    if (t.root.left.right.parent !== t.root.left) throw new Error('Assertion failed');\n    if (t.root.left.right.label !== 6) throw new Error('Assertion failed');\n\n    t.put(1);\n\n    if (t.root.left.left === null) throw new Error('Assertion failed');\n    if (t.root.left.left.parent !== t.root.left) throw new Error('Assertion failed');\n    if (t.root.left.left.label !== 1) throw new Error('Assertion failed');\n\n    try {\n        t.put(1);\n    } catch (exception) {\n        // Exception caught, do nothing\n    }",
    "21": "t = _get_binary_search_tree();\n\n    node = t.search(6);\n    if (node.label !== 6) throw new Error('Assertion failed');\n\n    node = t.search(13);\n    if (node.label !== 13) throw new Error('Assertion failed');\n\n    try {\n        t.search(2);\n    } catch (exception) {\n        // pass\n    }",
    "22": "t = _get_binary_search_tree();\n\n    t.remove(13);\n\n    if (!(t.root !== null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.right !== null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.right.right !== null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.right.right.right === null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.right.right.left === null)) throw new Error(\"Assertion failed\");\n\n    t.remove(7);\n\n    if (!(t.root.left !== null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.right !== null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.right.left !== null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.right.right === null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.right.left.label === 4)) throw new Error(\"Assertion failed\");\n\n    t.remove(6);\n\n    if (!(t.root.left.left !== null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.right.right !== null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.left.label === 1)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.right.label === 4)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.right.right.label === 5)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.right.left === null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.left.parent === t.root.left)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.right.parent === t.root.left)) throw new Error(\"Assertion failed\");\n\n    t.remove(3);\n\n    if (!(t.root !== null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.label === 4)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.right.label === 5)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.left.label === 1)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.parent === t.root)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.left.parent === t.root.left)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.right.parent === t.root.left)) throw new Error(\"Assertion failed\");\n\n    t.remove(4);\n\n    if (!(t.root.left !== null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.left !== null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.label === 5)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.right === null)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.left.label === 1)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.parent === t.root)) throw new Error(\"Assertion failed\");\n    if (!(t.root.left.left.parent === t.root.left)) throw new Error(\"Assertion failed\");",
    "23": "t = _get_binary_search_tree();\n\n    t.remove(3);\n\n    if (t.root === null) throw new Error('Assertion failed');\n    if (t.root.left === null) throw new Error('Assertion failed');\n    if (t.root.left.left === null) throw new Error('Assertion failed');\n    if (t.root.left.right === null) throw new Error('Assertion failed');\n    if (t.root.left.right.left === null) throw new Error('Assertion failed');\n    if (t.root.left.right.right === null) throw new Error('Assertion failed');\n    if (t.root.left.label !== 4) throw new Error('Assertion failed');\n    if (t.root.left.right.label !== 6) throw new Error('Assertion failed');\n    if (t.root.left.left.label !== 1) throw new Error('Assertion failed');\n    if (t.root.left.right.right.label !== 7) throw new Error('Assertion failed');\n    if (t.root.left.right.left.label !== 5) throw new Error('Assertion failed');\n    if (t.root.left.parent !== t.root) throw new Error('Assertion failed');\n    if (t.root.left.right.parent !== t.root.left) throw new Error('Assertion failed');\n    if (t.root.left.left.parent !== t.root.left) throw new Error('Assertion failed');\n    if (t.root.left.right.left.parent !== t.root.left.right) throw new Error('Assertion failed');",
    "24": "t = _get_binary_search_tree();\n    t.empty();\n    console.assert(t.root === null);",
    "25": "t = _get_binary_search_tree();\n    if (t.is_empty()) throw new Error(\"Assertion failed\");\n\n    t.empty();\n    if (!t.is_empty()) throw new Error(\"Assertion failed\");",
    "26": "t = _get_binary_search_tree();\n\n    console.assert(t.exists(6));\n    console.assert(!t.exists(-1));",
    "27": "t = _get_binary_search_tree();\n\n    if (t.get_max_label() !== 14) {\n        throw new Error('Assertion failed');\n    }\n\n    t.empty();\n\n    try {\n        t.get_max_label();\n    } catch (exception) {\n        // pass\n    }",
    "28": "t = _get_binary_search_tree();\n\n    if (t.get_min_label() !== 1) {\n        throw new Error('Assertion failed');\n    }\n\n    t.empty();\n\n    try {\n        t.get_min_label();\n    } catch (exception) {\n        // pass\n    }",
    "29": "t = _get_binary_search_tree();\n\n    tmp = t.inorder_traversal();\n    inorder_traversal_nodes = Array.from(tmp).map(i => i.label);\n    console.assert(JSON.stringify(inorder_traversal_nodes) === JSON.stringify([1, 3, 4, 5, 6, 7, 8, 10, 13, 14]));",
    "30": "t = _get_binary_search_tree();\n\n    tmp = t.preorder_traversal();\n    preorder_traversal_nodes = Array.from(tmp).map(i => i.label);\n    console.assert(JSON.stringify(preorder_traversal_nodes) === JSON.stringify([8, 3, 1, 6, 4, 5, 7, 10, 14, 13]));",
    "31": "t = new BinarySearchTree();\n    t.put(8);\n    t.put(3);\n    t.put(6);\n    t.put(1);\n    t.put(10);\n    t.put(14);\n    t.put(13);\n    t.put(4);\n    t.put(7);\n    t.put(5);\n\n    console.log(\n        `\n            8\n           / \\\\\n          3   10\n         / \\\\    \\\\\n        1   6    14\n           / \\\\   /\n          4   7 13\n           \\\\\n            5\n        `\n    );\n\n    console.log(\"Label 6 exists:\", t.exists(6));\n    console.log(\"Label 13 exists:\", t.exists(13));\n    console.log(\"Label -1 exists:\", t.exists(-1));\n    console.log(\"Label 12 exists:\", t.exists(12));\n\n    // Prints all the elements of the list in inorder traversal\n    tmp = t.inorder_traversal()\n    var inorder_traversal_nodes = Array.from(tmp).map(function(i) { return i.label; });\n    console.log(\"Inorder traversal:\", inorder_traversal_nodes);\n\n    // Prints all the elements of the list in preorder traversal\n    tmp = t.preorder_traversal()\n    var preorder_traversal_nodes = Array.from(tmp).map(function(i) { return i.label; });\n    console.log(\"Preorder traversal:\", preorder_traversal_nodes);\n\n    console.log(\"Max. label:\", t.get_max_label());\n    console.log(\"Min. label:\", t.get_min_label());\n\n    // Delete elements\n    console.log(\"\\nDeleting elements 13, 10, 8, 3, 6, 14\");\n    console.log(\n        `\n          4\n         / \\\\\n        1   7\n             \\\\\n              5\n        `\n    );\n    t.remove(13);\n    t.remove(10);\n    t.remove(8);\n    t.remove(3);\n    t.remove(6);\n    t.remove(14);\n\n    // Prints all the elements of the list in inorder traversal after delete\n    tmp = t.inorder_traversal()\n    inorder_traversal_nodes = Array.from(tmp).map(function(i) { return i.label; });\n    console.log(\"Inorder traversal after delete:\", inorder_traversal_nodes);\n\n    // Prints all the elements of the list in preorder traversal after delete\n    tmp = t.preorder_traversal()\n    preorder_traversal_nodes = Array.from(tmp).map(function(i) { return i.label; });\n    console.log(\"Preorder traversal after delete:\", preorder_traversal_nodes);\n\n    console.log(\"Max. label:\", t.get_max_label());\n    console.log(\"Min. label:\", t.get_min_label());\n",
    "32": "binary_search_tree_example();\ntest_put();\ntest_search();\ntest_remove();\ntest_remove_2();\ntest_is_empty();\ntest_empty();\ntest_exists();\ntest_get_max_label();\ntest_get_min_label();\ntest_inorder_traversal();\ntest_preorder_traversal();",
    "0": "test();\n"
}