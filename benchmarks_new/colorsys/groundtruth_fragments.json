{"1": "var y = 0.30*r + 0.59*g + 0.11*b;\n    var i = 0.74*(r-y) - 0.27*(b-y);\n    var q = 0.48*(r-y) + 0.41*(b-y);\n    return [y, i, q];", "2": "var r = y + 0.9468822170900693 * i + 0.6235565819861433 * q;\n    var g = y - 0.27478764629897834 * i - 0.6356910791873801 * q;\n    var b = y - 1.1085450346420322 * i + 1.7090069284064666 * q;\n    if (r < 0.0) {\n        r = 0.0;\n    }\n    if (g < 0.0) {\n        g = 0.0;\n    }\n    if (b < 0.0) {\n        b = 0.0;\n    }\n    if (r > 1.0) {\n        r = 1.0;\n    }\n    if (g > 1.0) {\n        g = 1.0;\n    }\n    if (b > 1.0) {\n        b = 1.0;\n    }\n    return [r, g, b];\n", "3": "var maxc = Math.max(r, g, b);\n    var minc = Math.min(r, g, b);\n    var sumc = (maxc + minc);\n    var rangec = (maxc - minc);\n    var l = sumc / 2.0;\n    if (minc == maxc) {\n        return [0.0, l, 0.0];\n    }\n    var s;\n    if (l <= 0.5) {\n        s = rangec / sumc;\n    } else {\n        s = rangec / (2.0 - sumc);\n    }\n    var rc = (maxc - r) / rangec;\n    var gc = (maxc - g) / rangec;\n    var bc = (maxc - b) / rangec;\n    var h;\n    if (r == maxc) {\n        h = bc - gc;\n    } else if (g == maxc) {\n        h = 2.0 + rc - bc;\n    } else {\n        h = 4.0 + gc - rc;\n    }\n    h = (h / 6.0) % 1.0;\n    if (h < 0) {\n        h += 1.0;\n    }\n    return [h, l, s];", "4": "    if (s === 0.0) {\n        return [l, l, l];\n    }\n    var m2;\n    if (l <= 0.5) {\n        m2 = l * (1.0 + s);\n    } else {\n        m2 = l + s - (l * s);\n    }\n    var m1 = 2.0 * l - m2;\n    var tmp_1 = _v(m1, m2, h + ONE_THIRD);\n    var tmp_2 = _v(m1, m2, h);\n    var tmp_3 = _v(m1, m2, h - ONE_THIRD);\n    return [tmp_1, tmp_2, tmp_3];", "5": "    hue = hue % 1.0;\n    if (hue < 0) hue += 1.0;\n    if (hue < ONE_SIXTH) {\n        return m1 + (m2 - m1) * hue * 6.0;\n    }\n    if (hue < 0.5) {\n        return m2;\n    }\n    if (hue < TWO_THIRD) {\n        return m1 + (m2 - m1) * (TWO_THIRD - hue) * 6.0;\n    }\n    return m1;\n", "6": "var maxc = Math.max(r, g, b);\n    var minc = Math.min(r, g, b);\n    var rangec = maxc - minc;\n    var v = maxc;\n    if (minc == maxc) {\n        return [0.0, 0.0, v];\n    }\n    var s = rangec / maxc;\n    var rc = (maxc - r) / rangec;\n    var gc = (maxc - g) / rangec;\n    var bc = (maxc - b) / rangec;\n    var h;\n    if (r == maxc) {\n        h = bc - gc;\n    } else if (g == maxc) {\n        h = 2.0 + rc - bc;\n    } else {\n        h = 4.0 + gc - rc;\n    }\n    h = (h / 6.0) % 1.0;\n    if (h < 0) {\n        h += 1.0;\n    }\n    return [h, s, v];\n", "7": "if (s === 0.0) {\n        return [v, v, v];\n    }\n    var i = parseInt(h * 6.0);\n    var f = (h * 6.0) - i;\n    var p = v * (1.0 - s);\n    var q = v * (1.0 - s * f);\n    var t = v * (1.0 - s * (1.0 - f));\n    i = i % 6;\n    if (i === 0) {\n        return [v, t, p];\n    }\n    if (i === 1) {\n        return [q, v, p];\n    }\n    if (i === 2) {\n        return [p, v, t];\n    }\n    if (i === 3) {\n        return [p, q, v];\n    }\n    if (i === 4) {\n        return [t, p, v];\n    }\n    if (i === 5) {\n        return [v, p, q];\n    }\n    // Cannot get here", "8": "if (!(Math.abs(a - b) <= 0.0001)) {\n    throw new Error('Assertion failed');\n}\nreturn true;", "9": "    for (var index = 0; index < iter1.length && index < iter2.length; index++) {\n        var a = iter1[index];\n        var b = iter2[index];\n        user_assert_almost_equal(a, b);\n    }\n    return true;\n", "10": "    console.log(\"--- rgb_to_yiq ---\");\n    var tmp = rgb_to_yiq(0.5, 0.5, 0.5);\n    var _const_var = [0.49999999999999994, 2.6090241078691177e-17, 4.940492459581946e-17];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = rgb_to_yiq(0, 0.5, 1);\n    var _const_var = [0.40499999999999997, -0.46035, 0.04954999999999998];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = rgb_to_yiq(1, 0, 0);\n    var _const_var = [0.3, 0.599, 0.21299999999999997];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = rgb_to_yiq(0, 0, 0);\n    var _const_var = [0.0, 0.0, 0.0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = rgb_to_yiq(1, 0.1, 0.3);\n    var _const_var = [0.392, 0.47476, 0.25411999999999996];\n    assert_iter_almost_equal(tmp, _const_var);\n    console.log(\"--- yiq_to_rgb ---\");\n    tmp = yiq_to_rgb(1.0, 0.5957, 0.0);\n    var _const_var = [1.0, 0.8363089990996986, 0.33963972286374133];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = yiq_to_rgb(0.0, -0.5957, -0.5226);\n    var _const_var = [0.0, 0.49590315888362624, 0.0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = yiq_to_rgb(0.8, 0.1, 0.2);\n    var _const_var = [1.0, 0.6453830195326262, 1.0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = yiq_to_rgb(0.0, 0.0, 0.0);\n    var _const_var = [0.0, 0.0, 0.0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = yiq_to_rgb(1.0, 0.0, 0.0);\n    var _const_var = [1.0, 1.0, 1.0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = yiq_to_rgb(0.5, 0.0, 0.0);\n    var _const_var = [0.5, 0.5, 0.5];\n    assert_iter_almost_equal(tmp, _const_var);\n    console.log(\"--- rgb_to_hls ---\");\n    tmp = rgb_to_hls(0.5, 0.5, 0.5);\n    var _const_var = [0.0, 0.5, 0.0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = rgb_to_hls(0, 0.5, 1);\n    var _const_var = [0.5833333333333334, 0.5, 1.0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = rgb_to_hls(1, 0, 0);\n    var _const_var = [0.0, 0.5, 1.0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = rgb_to_hls(0, 0, 0);\n    var _const_var = [0.0, 0.0, 0.0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = rgb_to_hls(1, 0.1, 0.3);\n    var _const_var = [0.9629629629629629, 0.55, 1.0000000000000002];\n    assert_iter_almost_equal(tmp, _const_var);\n    console.log(\"--- hls_to_rgb ---\");\n    tmp = hls_to_rgb(0.5, 0.5, 0.5);\n    var _const_var = [0.25, 0.7499999999999999, 0.75];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = hls_to_rgb(0, 0.5, 1);\n    var _const_var = [1.0, 0.0, 0.0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = hls_to_rgb(1, 0, 0);\n    var _const_var = [0, 0, 0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = hls_to_rgb(0, 0, 0);\n    var _const_var = [0, 0, 0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = hls_to_rgb(1, 0.1, 0.3);\n    var _const_var = [0.13, 0.07, 0.07];\n    assert_iter_almost_equal(tmp, _const_var);\n    console.log(\"--- rgb_to_hsv ---\");\n    tmp = rgb_to_hsv(0.5, 0.5, 0.5);\n    var _const_var = [0.0, 0.0, 0.5];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = rgb_to_hsv(0, 0.5, 1);\n    var _const_var = [0.5833333333333334, 1.0, 1];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = rgb_to_hsv(1, 0, 0);\n    var _const_var = [0.0, 1.0, 1];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = rgb_to_hsv(0, 0, 0);\n    var _const_var = [0.0, 0.0, 0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = rgb_to_hsv(1, 0.1, 0.3);\n    var _const_var = [0.9629629629629629, 0.9, 1];\n    assert_iter_almost_equal(tmp, _const_var);\n    console.log(\"--- hsv_to_rgb ---\");\n    tmp = hsv_to_rgb(0.5, 0.5, 0.5);\n    var _const_var = [0.25, 0.5, 0.5];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = hsv_to_rgb(0, 0.5, 1);\n    var _const_var = [1, 0.5, 0.5];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = hsv_to_rgb(1, 0, 0);\n    var _const_var = [0, 0, 0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = hsv_to_rgb(0, 0, 0);\n    var _const_var = [0, 0, 0];\n    assert_iter_almost_equal(tmp, _const_var);\n    tmp = hsv_to_rgb(1, 0.1, 0.3);\n    var _const_var = [0.3, 0.27, 0.27];\n    assert_iter_almost_equal(tmp, _const_var);\n", "11": "test_assertions();\nadditional_tests();\n", "12": "    _tmp = yiq_to_rgb(0.0, 1.0, 0.3)\n    _const = [1.0, 0.0, 0.0]\n    assert_iter_almost_equal(_tmp, _const)\n    _tmp = yiq_to_rgb(2.0, 0.0, 0.0)\n    _const = [1.0, 1.0, 1.0]\n    assert_iter_almost_equal(_tmp, _const)\n    _tmp = rgb_to_hls(0.5, 1.5, 0.2)\n    _const = [0.2948717948717949, 0.85, 4.333333333333333]\n    assert_iter_almost_equal(_tmp, _const)\n    _tmp = hls_to_rgb(0.5, 0.6, 0.2)\n    _const = [0.5199999999999999, 0.68, 0.68]\n    assert_iter_almost_equal(_tmp, _const)\n    _tmp = rgb_to_hsv(0.5, 1.5, 0.2)\n    _const = [0.2948717948717949, 0.8666666666666666, 1.5]\n    assert_iter_almost_equal(_tmp, _const)\n    _tmp = hsv_to_rgb(0.2, 0.6, 0.2)\n    _const = [0.176, 0.2, 0.08]\n    assert_iter_almost_equal(_tmp, _const)\n    _tmp = hsv_to_rgb(0.4, 0.6, 0.2)\n    _const = [0.08, 0.2, 0.128]\n    assert_iter_almost_equal(_tmp, _const)\n    _tmp = hsv_to_rgb(0.7, 0.6, 0.2)\n    _const = [0.10399999999999993, 0.08000000000000002, 0.2]\n    assert_iter_almost_equal(_tmp, _const)\n    _tmp = hsv_to_rgb(0.9, 0.6, 0.2)\n    _const = [0.2, 0.08000000000000002, 0.15199999999999997]\n    assert_iter_almost_equal(_tmp, _const)\n", "0": "var ONE_THIRD = 1.0 / 3.0;\n\nvar ONE_SIXTH = 1.0 / 6.0;\n\nvar TWO_THIRD = 2.0 / 3.0;\n\ntest();\n"}